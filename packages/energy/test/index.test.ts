import { Energy } from '../src';

describe('@iqprotocol/energy', () => {
  describe('halfLife', () => {
    // Algo: c0 * 0.5 ** ((t - t0) / t12)
    test.each`
      t0     | c0                               | t12           | t             | expected
      ${100} | ${1000}                          | ${20}         | ${100}        | ${1000}
      ${100} | ${1000}                          | ${20}         | ${120}        | ${500}
      ${100} | ${1000}                          | ${20}         | ${140}        | ${250}
      ${100} | ${1000}                          | ${20}         | ${110}        | ${707.1067811865476}
      ${100} | ${1997.25}                       | ${20}         | ${110}        | ${1412.2690187248322}
      ${0}   | ${1997.25}                       | ${2373046875} | ${2373046874} | ${998.6250002916901}
      ${0}   | ${199700000001.25}               | ${2373046875} | ${2373046874} | ${99850000029.79036}
      ${0}   | ${4503599627370449.333}          | ${2373046875} | ${2373046874} | ${2251799814342956.5}
      ${0}   | ${Number.MAX_SAFE_INTEGER / 2.0} | ${2373046875} | ${2373046874} | ${2251799814342979.5}
    `('returns $expected with t0 = $t0, c0 = $c0, t12 = $t12, t = $t', ({ t0, c0, t12, t, expected }) => {
      expect(Energy.halfLife(t0, c0, t12, t)).toEqual(expected);
    });

    it('throws when period is negative', () => {
      expect(() => Energy.halfLife(100, 1000, 20, 50)).toThrow();
    });
  });
});
