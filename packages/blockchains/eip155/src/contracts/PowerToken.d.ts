/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PowerTokenInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "availableBalanceOf(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableSwappingForever()": FunctionFragment;
    "enableTransferForever()": FunctionFragment;
    "energyAt(address,uint32)": FunctionFragment;
    "estimateRentalFee(address,uint112,uint32)": FunctionFragment;
    "forceTransfer(address,address,uint256)": FunctionFragment;
    "getBaseRate()": FunctionFragment;
    "getBaseToken()": FunctionFragment;
    "getEnergyGapHalvingPeriod()": FunctionFragment;
    "getEnterprise()": FunctionFragment;
    "getIndex()": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getMaxRentalPeriod()": FunctionFragment;
    "getMinGCFee()": FunctionFragment;
    "getMinRentalPeriod()": FunctionFragment;
    "getServiceFeePercent()": FunctionFragment;
    "getState(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,uint8)": FunctionFragment;
    "isAllowedRentalPeriod(uint32)": FunctionFragment;
    "isSwappingEnabled()": FunctionFragment;
    "isTransferEnabled()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "notifyNewRental(uint256)": FunctionFragment;
    "setBaseRate(uint112,address,uint96)": FunctionFragment;
    "setRentalPeriodLimits(uint32,uint32)": FunctionFragment;
    "setServiceFeePercent(uint16)": FunctionFragment;
    "swapIn(uint256)": FunctionFragment;
    "swapOut(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableSwappingForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTransferForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "energyAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRentalFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnergyGapHalvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterprise",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getIndex", values?: undefined): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxRentalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinGCFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinRentalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedRentalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwappingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyNewRental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRate",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRentalPeriodLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableSwappingForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTransferForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "energyAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateRentalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnergyGapHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinGCFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwappingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyNewRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRentalPeriodLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BaseRateChanged(uint112,address,uint96)": EventFragment;
    "RentalPeriodLimitsChanged(uint32,uint32)": EventFragment;
    "ServiceFeePercentChanged(uint16)": EventFragment;
    "SwappingEnabled()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferEnabled()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RentalPeriodLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceFeePercentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwappingEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferEnabled"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BaseRateChangedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    baseRate: BigNumber;
    baseToken: string;
    minGCFee: BigNumber;
  }
>;

export type RentalPeriodLimitsChangedEvent = TypedEvent<
  [number, number] & { minRentalPeriod: number; maxRentalPeriod: number }
>;

export type ServiceFeePercentChangedEvent = TypedEvent<
  [number] & { percent: number }
>;

export type SwappingEnabledEvent = TypedEvent<[] & {}>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type TransferEnabledEvent = TypedEvent<[] & {}>;

export class PowerToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PowerTokenInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableSwappingForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableTransferForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateRentalFee(
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        poolFee: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
      }
    >;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBaseRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseToken(overrides?: CallOverrides): Promise<[string]>;

    getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<[number]>;

    getEnterprise(overrides?: CallOverrides): Promise<[string]>;

    getIndex(overrides?: CallOverrides): Promise<[number]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        boolean,
        boolean
      ] & {
        name: string;
        symbol: string;
        baseToken: string;
        baseRate: BigNumber;
        minGCFee: BigNumber;
        serviceFeePercent: number;
        energyGapHalvingPeriod: number;
        index: number;
        minRentalPeriod: number;
        maxRentalPeriod: number;
        swappingEnabled: boolean;
        transferEnabled: boolean;
      }
    >;

    getMaxRentalPeriod(overrides?: CallOverrides): Promise<[number]>;

    getMinGCFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinRentalPeriod(overrides?: CallOverrides): Promise<[number]>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<[number]>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          lockedBalance: BigNumber;
          energy: BigNumber;
          timestamp: number;
        }
      ]
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint8)"(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isTransferEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyNewRental(
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapIn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapOut(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnFrom(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableSwappingForever(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableTransferForever(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  energyAt(
    who: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateRentalFee(
    paymentToken: string,
    rentalAmount: BigNumberish,
    rentalPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      poolFee: BigNumber;
      serviceFee: BigNumber;
      gcFee: BigNumber;
    }
  >;

  forceTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseToken(overrides?: CallOverrides): Promise<string>;

  getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

  getEnterprise(overrides?: CallOverrides): Promise<string>;

  getIndex(overrides?: CallOverrides): Promise<number>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      boolean,
      boolean
    ] & {
      name: string;
      symbol: string;
      baseToken: string;
      baseRate: BigNumber;
      minGCFee: BigNumber;
      serviceFeePercent: number;
      energyGapHalvingPeriod: number;
      index: number;
      minRentalPeriod: number;
      maxRentalPeriod: number;
      swappingEnabled: boolean;
      transferEnabled: boolean;
    }
  >;

  getMaxRentalPeriod(overrides?: CallOverrides): Promise<number>;

  getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMinRentalPeriod(overrides?: CallOverrides): Promise<number>;

  getServiceFeePercent(overrides?: CallOverrides): Promise<number>;

  getState(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      lockedBalance: BigNumber;
      energy: BigNumber;
      timestamp: number;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint8)"(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
    enterprise: string,
    baseToken: string,
    baseRate: BigNumberish,
    minGCFee: BigNumberish,
    serviceFeePercent: BigNumberish,
    energyGapHalvingPeriod: BigNumberish,
    index: BigNumberish,
    minRentalPeriod: BigNumberish,
    maxRentalPeriod: BigNumberish,
    swappingEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    enterprise: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedRentalPeriod(
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSwappingEnabled(overrides?: CallOverrides): Promise<boolean>;

  isTransferEnabled(overrides?: CallOverrides): Promise<boolean>;

  mint(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  notifyNewRental(
    rentalTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseRate(
    baseRate: BigNumberish,
    baseToken: string,
    minGCFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRentalPeriodLimits(
    minRentalPeriod: BigNumberish,
    maxRentalPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServiceFeePercent(
    newServiceFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapIn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapOut(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableSwappingForever(overrides?: CallOverrides): Promise<void>;

    enableTransferForever(overrides?: CallOverrides): Promise<void>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRentalFee(
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        poolFee: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
      }
    >;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<string>;

    getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

    getEnterprise(overrides?: CallOverrides): Promise<string>;

    getIndex(overrides?: CallOverrides): Promise<number>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        boolean,
        boolean
      ] & {
        name: string;
        symbol: string;
        baseToken: string;
        baseRate: BigNumber;
        minGCFee: BigNumber;
        serviceFeePercent: number;
        energyGapHalvingPeriod: number;
        index: number;
        minRentalPeriod: number;
        maxRentalPeriod: number;
        swappingEnabled: boolean;
        transferEnabled: boolean;
      }
    >;

    getMaxRentalPeriod(overrides?: CallOverrides): Promise<number>;

    getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinRentalPeriod(overrides?: CallOverrides): Promise<number>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<number>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        lockedBalance: BigNumber;
        energy: BigNumber;
        timestamp: number;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(string,string,uint8)"(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      enterprise: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<boolean>;

    isTransferEnabled(overrides?: CallOverrides): Promise<boolean>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    notifyNewRental(
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapIn(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    swapOut(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "BaseRateChanged(uint112,address,uint96)"(
      baseRate?: null,
      baseToken?: null,
      minGCFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { baseRate: BigNumber; baseToken: string; minGCFee: BigNumber }
    >;

    BaseRateChanged(
      baseRate?: null,
      baseToken?: null,
      minGCFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { baseRate: BigNumber; baseToken: string; minGCFee: BigNumber }
    >;

    "RentalPeriodLimitsChanged(uint32,uint32)"(
      minRentalPeriod?: null,
      maxRentalPeriod?: null
    ): TypedEventFilter<
      [number, number],
      { minRentalPeriod: number; maxRentalPeriod: number }
    >;

    RentalPeriodLimitsChanged(
      minRentalPeriod?: null,
      maxRentalPeriod?: null
    ): TypedEventFilter<
      [number, number],
      { minRentalPeriod: number; maxRentalPeriod: number }
    >;

    "ServiceFeePercentChanged(uint16)"(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    ServiceFeePercentChanged(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    "SwappingEnabled()"(): TypedEventFilter<[], {}>;

    SwappingEnabled(): TypedEventFilter<[], {}>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "TransferEnabled()"(): TypedEventFilter<[], {}>;

    TransferEnabled(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableSwappingForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableTransferForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRentalFee(
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterprise(overrides?: CallOverrides): Promise<BigNumber>;

    getIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxRentalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinRentalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getState(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string,string,uint8)"(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyNewRental(
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapIn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapOut(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableSwappingForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableTransferForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRentalFee(
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBaseRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnergyGapHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterprise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxRentalPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinGCFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinRentalPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint8)"(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyNewRental(
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapIn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapOut(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
