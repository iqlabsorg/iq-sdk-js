/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IPowerTokenStorageInterface extends utils.Interface {
  functions: {
    "getIndex()": FunctionFragment;
    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)": FunctionFragment;
    "isAllowedRentalPeriod(uint32)": FunctionFragment;
    "isSwappingEnabled()": FunctionFragment;
    "isTransferEnabled()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getIndex"
      | "initialize"
      | "isAllowedRentalPeriod"
      | "isSwappingEnabled"
      | "isTransferEnabled"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedRentalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwappingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwappingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferEnabled",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPowerTokenStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPowerTokenStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getIndex(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isTransferEnabled(overrides?: CallOverrides): Promise<[boolean]>;
  };

  getIndex(overrides?: CallOverrides): Promise<number>;

  initialize(
    enterprise: string,
    baseToken: string,
    baseRate: BigNumberish,
    minGCFee: BigNumberish,
    serviceFeePercent: BigNumberish,
    energyGapHalvingPeriod: BigNumberish,
    index: BigNumberish,
    minRentalPeriod: BigNumberish,
    maxRentalPeriod: BigNumberish,
    swappingEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedRentalPeriod(
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSwappingEnabled(overrides?: CallOverrides): Promise<boolean>;

  isTransferEnabled(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getIndex(overrides?: CallOverrides): Promise<number>;

    initialize(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<boolean>;

    isTransferEnabled(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getIndex(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferEnabled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
