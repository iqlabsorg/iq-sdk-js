/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EnterpriseInterface extends ethers.utils.Interface {
  functions: {
    "claimStakingReward(uint256)": FunctionFragment;
    "decreaseStake(uint256,uint256)": FunctionFragment;
    "disablePaymentToken(address)": FunctionFragment;
    "enablePaymentToken(address)": FunctionFragment;
    "estimateRentalFee(address,address,uint112,uint32)": FunctionFragment;
    "extendRentalPeriod(uint256,address,uint32,uint256)": FunctionFragment;
    "getAvailableReserve()": FunctionFragment;
    "getBaseUri()": FunctionFragment;
    "getBondingCurve()": FunctionFragment;
    "getConverter()": FunctionFragment;
    "getEnterpriseCollector()": FunctionFragment;
    "getEnterpriseOnlyCollectionPeriod()": FunctionFragment;
    "getEnterpriseToken()": FunctionFragment;
    "getEnterpriseWallet()": FunctionFragment;
    "getFactory()": FunctionFragment;
    "getGCFeePercent()": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getPaymentToken(uint256)": FunctionFragment;
    "getPaymentTokenIndex(address)": FunctionFragment;
    "getPowerTokens()": FunctionFragment;
    "getProxyAdmin()": FunctionFragment;
    "getRentalAgreement(uint256)": FunctionFragment;
    "getRentalToken()": FunctionFragment;
    "getRenterOnlyReturnPeriod()": FunctionFragment;
    "getReserve()": FunctionFragment;
    "getStake(uint256)": FunctionFragment;
    "getStakeToken()": FunctionFragment;
    "getStakingReward(uint256)": FunctionFragment;
    "getStreamingReserveHalvingPeriod()": FunctionFragment;
    "getUsedReserve()": FunctionFragment;
    "increaseStake(uint256,uint256)": FunctionFragment;
    "initialize(string,string,uint16,address,address,address)": FunctionFragment;
    "initializeTokens(address,address,address)": FunctionFragment;
    "isRegisteredPowerToken(address)": FunctionFragment;
    "isSupportedPaymentToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerService(string,string,uint32,uint112,address,uint16,uint32,uint32,uint96,bool)": FunctionFragment;
    "rent(address,address,uint112,uint32,uint256)": FunctionFragment;
    "returnRental(uint256)": FunctionFragment;
    "setBaseUri(string)": FunctionFragment;
    "setBondingCurve(uint256,uint256)": FunctionFragment;
    "setConverter(address)": FunctionFragment;
    "setEnterpriseCollector(address)": FunctionFragment;
    "setEnterpriseOnlyCollectionPeriod(uint32)": FunctionFragment;
    "setEnterpriseWallet(address)": FunctionFragment;
    "setGcFeePercent(uint16)": FunctionFragment;
    "setRenterOnlyReturnPeriod(uint32)": FunctionFragment;
    "setStreamingReserveHalvingPeriod(uint32)": FunctionFragment;
    "shutdownEnterpriseForever()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRental(address,address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "upgrade(address,address,address,address,address,address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimStakingReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disablePaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRentalFee",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendRentalPeriod",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConverter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseOnlyCollectionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGCFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentTokenIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalAgreement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRenterOnlyReturnPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamingReserveHalvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsedReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTokens",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredPowerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedPaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerService",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnRental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseUri", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBondingCurve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConverter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnterpriseCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnterpriseOnlyCollectionPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnterpriseWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGcFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRenterOnlyReturnPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreamingReserveHalvingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownEnterpriseForever",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRental",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [string, string, string, string, string, string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimStakingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disablePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRentalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseOnlyCollectionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGCFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRenterOnlyReturnPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreamingReserveHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsedReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredPowerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnterpriseCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnterpriseOnlyCollectionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnterpriseWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGcFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenterOnlyReturnPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStreamingReserveHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownEnterpriseForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {
    "BaseUriChanged(string)": EventFragment;
    "BondingChanged(uint256,uint256)": EventFragment;
    "ConverterChanged(address)": EventFragment;
    "EnterpriseCollectorChanged(address)": EventFragment;
    "EnterpriseOnlyCollectionPeriodChanged(uint32)": EventFragment;
    "EnterpriseShutdown()": EventFragment;
    "EnterpriseWalletChanged(address)": EventFragment;
    "FixedReserveChanged(uint256)": EventFragment;
    "GcFeePercentChanged(uint16)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentTokenChange(address,bool)": EventFragment;
    "RentalPeriodExtended(uint256,address,address,uint112,uint112,uint32,uint32,uint32)": EventFragment;
    "RentalReturned(uint256,address,address,uint112,uint112,address,uint256,uint256)": EventFragment;
    "Rented(uint256,address,address,address,uint112,uint112,uint112,uint112,uint32,uint32,uint32,uint32,uint256,uint256)": EventFragment;
    "RenterOnlyReturnPeriodChanged(uint32)": EventFragment;
    "ServiceRegistered(address)": EventFragment;
    "StakeChanged(uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StreamingReserveChanged(uint112,uint112)": EventFragment;
    "StreamingReserveHalvingPeriodChanged(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseUriChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConverterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterpriseCollectorChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EnterpriseOnlyCollectionPeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterpriseShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterpriseWalletChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedReserveChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GcFeePercentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RentalPeriodExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RentalReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rented"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RenterOnlyReturnPeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamingReserveChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StreamingReserveHalvingPeriodChanged"
  ): EventFragment;
}

export type BaseUriChangedEvent = TypedEvent<[string] & { baseUri: string }>;

export type BondingChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }
>;

export type ConverterChangedEvent = TypedEvent<
  [string] & { converter: string }
>;

export type EnterpriseCollectorChangedEvent = TypedEvent<
  [string] & { collector: string }
>;

export type EnterpriseOnlyCollectionPeriodChangedEvent = TypedEvent<
  [number] & { period: number }
>;

export type EnterpriseShutdownEvent = TypedEvent<[] & {}>;

export type EnterpriseWalletChangedEvent = TypedEvent<
  [string] & { wallet: string }
>;

export type FixedReserveChangedEvent = TypedEvent<
  [BigNumber] & { fixedReserve: BigNumber }
>;

export type GcFeePercentChangedEvent = TypedEvent<
  [number] & { percent: number }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaymentTokenChangeEvent = TypedEvent<
  [string, boolean] & { paymentToken: string; enabled: boolean }
>;

export type RentalPeriodExtendedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, number, number, number] & {
    rentalTokenId: BigNumber;
    renter: string;
    paymentToken: string;
    poolFee: BigNumber;
    serviceFee: BigNumber;
    endTime: number;
    renterOnlyReturnTime: number;
    enterpriseOnlyCollectionTime: number;
  }
>;

export type RentalReturnedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    rentalTokenId: BigNumber;
    returner: string;
    powerToken: string;
    rentalAmount: BigNumber;
    gcRewardAmount: BigNumber;
    gcRewardToken: string;
    totalReserve: BigNumber;
    totalUsedReserve: BigNumber;
  }
>;

export type RentedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    rentalTokenId: BigNumber;
    renter: string;
    powerToken: string;
    paymentToken: string;
    rentalAmount: BigNumber;
    poolFee: BigNumber;
    serviceFee: BigNumber;
    gcFee: BigNumber;
    startTime: number;
    endTime: number;
    renterOnlyReturnTime: number;
    enterpriseOnlyCollectionTime: number;
    totalReserve: BigNumber;
    totalUsedReserve: BigNumber;
  }
>;

export type RenterOnlyReturnPeriodChangedEvent = TypedEvent<
  [number] & { period: number }
>;

export type ServiceRegisteredEvent = TypedEvent<
  [string] & { powerToken: string }
>;

export type StakeChangedEvent = TypedEvent<
  [
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stakeTokenId: BigNumber;
    staker: string;
    operation: number;
    amountDelta: BigNumber;
    amount: BigNumber;
    sharesDelta: BigNumber;
    shares: BigNumber;
    totalShares: BigNumber;
    totalReserve: BigNumber;
    totalUsedReserve: BigNumber;
  }
>;

export type StreamingReserveChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    streamingReserve: BigNumber;
    streamingReserveTarget: BigNumber;
  }
>;

export type StreamingReserveHalvingPeriodChangedEvent = TypedEvent<
  [number] & { period: number }
>;

export class Enterprise extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EnterpriseInterface;

  functions: {
    claimStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateRentalFee(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    extendRentalPeriod(
      rentalTokenId: BigNumberish,
      paymentToken: string,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseUri(overrides?: CallOverrides): Promise<[string]>;

    getBondingCurve(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }>;

    getConverter(overrides?: CallOverrides): Promise<[string]>;

    getEnterpriseCollector(overrides?: CallOverrides): Promise<[string]>;

    getEnterpriseOnlyCollectionPeriod(
      overrides?: CallOverrides
    ): Promise<[number]>;

    getEnterpriseToken(overrides?: CallOverrides): Promise<[string]>;

    getEnterpriseWallet(overrides?: CallOverrides): Promise<[string]>;

    getFactory(overrides?: CallOverrides): Promise<[string]>;

    getGCFeePercent(overrides?: CallOverrides): Promise<[number]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        name: string;
        baseUri: string;
        streamingReserveHalvingPeriod: number;
        renterOnlyReturnPeriod: number;
        enterpriseOnlyCollectionPeriod: number;
        gcFeePercent: number;
        totalShares: BigNumber;
        fixedReserve: BigNumber;
        usedReserve: BigNumber;
        streamingReserve: BigNumber;
        streamingReserveTarget: BigNumber;
        streamingReserveUpdated: number;
      }
    >;

    getPaymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPaymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPowerTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getProxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    getRentalAgreement(
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          number,
          number,
          number,
          number,
          number,
          BigNumber,
          number
        ] & {
          rentalAmount: BigNumber;
          powerTokenIndex: number;
          startTime: number;
          endTime: number;
          renterOnlyReturnTime: number;
          enterpriseOnlyCollectionTime: number;
          gcRewardAmount: BigNumber;
          gcRewardTokenIndex: number;
        }
      ]
    >;

    getRentalToken(overrides?: CallOverrides): Promise<[string]>;

    getRenterOnlyReturnPeriod(overrides?: CallOverrides): Promise<[number]>;

    getReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          shares: BigNumber;
          block: BigNumber;
        }
      ]
    >;

    getStakeToken(overrides?: CallOverrides): Promise<[string]>;

    getStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStreamingReserveHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUsedReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeTokens(
      enterpriseToken: string,
      stakeToken: string,
      rentalToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerService(
      serviceName: string,
      serviceSymbol: string,
      energyGapHalvingPeriod: BigNumberish,
      baseRate: BigNumberish,
      baseToken: string,
      serviceFeePercent: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      minGCFee: BigNumberish,
      swappingEnabledForever: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rent(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnRental(
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseUri(
      baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConverter(
      newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnterpriseOnlyCollectionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnterpriseWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRenterOnlyReturnPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStreamingReserveHalvingPeriod(
      streamingReserveHalvingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdownEnterpriseForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRental(
      from: string,
      to: string,
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakeTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      enterpriseFactory: string,
      enterpriseImplementation: string,
      rentalTokenImplementation: string,
      stakeTokenImplementation: string,
      powerTokenImplementation: string,
      powerTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimStakingReward(
    stakeTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseStake(
    stakeTokenId: BigNumberish,
    stakeAmountDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disablePaymentToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enablePaymentToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateRentalFee(
    powerToken: string,
    paymentToken: string,
    rentalAmount: BigNumberish,
    rentalPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extendRentalPeriod(
    rentalTokenId: BigNumberish,
    paymentToken: string,
    rentalPeriod: BigNumberish,
    maxPayment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseUri(overrides?: CallOverrides): Promise<string>;

  getBondingCurve(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }>;

  getConverter(overrides?: CallOverrides): Promise<string>;

  getEnterpriseCollector(overrides?: CallOverrides): Promise<string>;

  getEnterpriseOnlyCollectionPeriod(overrides?: CallOverrides): Promise<number>;

  getEnterpriseToken(overrides?: CallOverrides): Promise<string>;

  getEnterpriseWallet(overrides?: CallOverrides): Promise<string>;

  getFactory(overrides?: CallOverrides): Promise<string>;

  getGCFeePercent(overrides?: CallOverrides): Promise<number>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      name: string;
      baseUri: string;
      streamingReserveHalvingPeriod: number;
      renterOnlyReturnPeriod: number;
      enterpriseOnlyCollectionPeriod: number;
      gcFeePercent: number;
      totalShares: BigNumber;
      fixedReserve: BigNumber;
      usedReserve: BigNumber;
      streamingReserve: BigNumber;
      streamingReserveTarget: BigNumber;
      streamingReserveUpdated: number;
    }
  >;

  getPaymentToken(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPaymentTokenIndex(
    token: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getPowerTokens(overrides?: CallOverrides): Promise<string[]>;

  getProxyAdmin(overrides?: CallOverrides): Promise<string>;

  getRentalAgreement(
    rentalTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, BigNumber, number] & {
      rentalAmount: BigNumber;
      powerTokenIndex: number;
      startTime: number;
      endTime: number;
      renterOnlyReturnTime: number;
      enterpriseOnlyCollectionTime: number;
      gcRewardAmount: BigNumber;
      gcRewardTokenIndex: number;
    }
  >;

  getRentalToken(overrides?: CallOverrides): Promise<string>;

  getRenterOnlyReturnPeriod(overrides?: CallOverrides): Promise<number>;

  getReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getStake(
    stakeTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      shares: BigNumber;
      block: BigNumber;
    }
  >;

  getStakeToken(overrides?: CallOverrides): Promise<string>;

  getStakingReward(
    stakeTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStreamingReserveHalvingPeriod(overrides?: CallOverrides): Promise<number>;

  getUsedReserve(overrides?: CallOverrides): Promise<BigNumber>;

  increaseStake(
    stakeTokenId: BigNumberish,
    stakeAmountDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint16,address,address,address)"(
    enterpriseName: string,
    baseUri: string,
    gcFeePercent: BigNumberish,
    converter: string,
    proxyAdmin: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    initialOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeTokens(
    enterpriseToken: string,
    stakeToken: string,
    rentalToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegisteredPowerToken(
    powerToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportedPaymentToken(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerService(
    serviceName: string,
    serviceSymbol: string,
    energyGapHalvingPeriod: BigNumberish,
    baseRate: BigNumberish,
    baseToken: string,
    serviceFeePercent: BigNumberish,
    minRentalPeriod: BigNumberish,
    maxRentalPeriod: BigNumberish,
    minGCFee: BigNumberish,
    swappingEnabledForever: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rent(
    powerToken: string,
    paymentToken: string,
    rentalAmount: BigNumberish,
    rentalPeriod: BigNumberish,
    maxPayment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnRental(
    rentalTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseUri(
    baseUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingCurve(
    pole: BigNumberish,
    slope: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConverter(
    newConverter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnterpriseCollector(
    newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnterpriseOnlyCollectionPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnterpriseWallet(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGcFeePercent(
    newGcFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRenterOnlyReturnPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStreamingReserveHalvingPeriod(
    streamingReserveHalvingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdownEnterpriseForever(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    stakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferRental(
    from: string,
    to: string,
    rentalTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakeTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    enterpriseFactory: string,
    enterpriseImplementation: string,
    rentalTokenImplementation: string,
    stakeTokenImplementation: string,
    powerTokenImplementation: string,
    powerTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disablePaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enablePaymentToken(token: string, overrides?: CallOverrides): Promise<void>;

    estimateRentalFee(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendRentalPeriod(
      rentalTokenId: BigNumberish,
      paymentToken: string,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseUri(overrides?: CallOverrides): Promise<string>;

    getBondingCurve(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }>;

    getConverter(overrides?: CallOverrides): Promise<string>;

    getEnterpriseCollector(overrides?: CallOverrides): Promise<string>;

    getEnterpriseOnlyCollectionPeriod(
      overrides?: CallOverrides
    ): Promise<number>;

    getEnterpriseToken(overrides?: CallOverrides): Promise<string>;

    getEnterpriseWallet(overrides?: CallOverrides): Promise<string>;

    getFactory(overrides?: CallOverrides): Promise<string>;

    getGCFeePercent(overrides?: CallOverrides): Promise<number>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        name: string;
        baseUri: string;
        streamingReserveHalvingPeriod: number;
        renterOnlyReturnPeriod: number;
        enterpriseOnlyCollectionPeriod: number;
        gcFeePercent: number;
        totalShares: BigNumber;
        fixedReserve: BigNumber;
        usedReserve: BigNumber;
        streamingReserve: BigNumber;
        streamingReserveTarget: BigNumber;
        streamingReserveUpdated: number;
      }
    >;

    getPaymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPaymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getPowerTokens(overrides?: CallOverrides): Promise<string[]>;

    getProxyAdmin(overrides?: CallOverrides): Promise<string>;

    getRentalAgreement(
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, BigNumber, number] & {
        rentalAmount: BigNumber;
        powerTokenIndex: number;
        startTime: number;
        endTime: number;
        renterOnlyReturnTime: number;
        enterpriseOnlyCollectionTime: number;
        gcRewardAmount: BigNumber;
        gcRewardTokenIndex: number;
      }
    >;

    getRentalToken(overrides?: CallOverrides): Promise<string>;

    getRenterOnlyReturnPeriod(overrides?: CallOverrides): Promise<number>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        shares: BigNumber;
        block: BigNumber;
      }
    >;

    getStakeToken(overrides?: CallOverrides): Promise<string>;

    getStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreamingReserveHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<number>;

    getUsedReserve(overrides?: CallOverrides): Promise<BigNumber>;

    increaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeTokens(
      enterpriseToken: string,
      stakeToken: string,
      rentalToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerService(
      serviceName: string,
      serviceSymbol: string,
      energyGapHalvingPeriod: BigNumberish,
      baseRate: BigNumberish,
      baseToken: string,
      serviceFeePercent: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      minGCFee: BigNumberish,
      swappingEnabledForever: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    rent(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnRental(
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseUri(baseUri: string, overrides?: CallOverrides): Promise<void>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConverter(
      newConverter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnterpriseOnlyCollectionPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnterpriseWallet(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRenterOnlyReturnPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStreamingReserveHalvingPeriod(
      streamingReserveHalvingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdownEnterpriseForever(overrides?: CallOverrides): Promise<void>;

    stake(stakeAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRental(
      from: string,
      to: string,
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      enterpriseFactory: string,
      enterpriseImplementation: string,
      rentalTokenImplementation: string,
      stakeTokenImplementation: string,
      powerTokenImplementation: string,
      powerTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BaseUriChanged(string)"(
      baseUri?: null
    ): TypedEventFilter<[string], { baseUri: string }>;

    BaseUriChanged(
      baseUri?: null
    ): TypedEventFilter<[string], { baseUri: string }>;

    "BondingChanged(uint256,uint256)"(
      pole?: null,
      slope?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { pole: BigNumber; slope: BigNumber }
    >;

    BondingChanged(
      pole?: null,
      slope?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { pole: BigNumber; slope: BigNumber }
    >;

    "ConverterChanged(address)"(
      converter?: null
    ): TypedEventFilter<[string], { converter: string }>;

    ConverterChanged(
      converter?: null
    ): TypedEventFilter<[string], { converter: string }>;

    "EnterpriseCollectorChanged(address)"(
      collector?: null
    ): TypedEventFilter<[string], { collector: string }>;

    EnterpriseCollectorChanged(
      collector?: null
    ): TypedEventFilter<[string], { collector: string }>;

    "EnterpriseOnlyCollectionPeriodChanged(uint32)"(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    EnterpriseOnlyCollectionPeriodChanged(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    "EnterpriseShutdown()"(): TypedEventFilter<[], {}>;

    EnterpriseShutdown(): TypedEventFilter<[], {}>;

    "EnterpriseWalletChanged(address)"(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;

    EnterpriseWalletChanged(
      wallet?: null
    ): TypedEventFilter<[string], { wallet: string }>;

    "FixedReserveChanged(uint256)"(
      fixedReserve?: null
    ): TypedEventFilter<[BigNumber], { fixedReserve: BigNumber }>;

    FixedReserveChanged(
      fixedReserve?: null
    ): TypedEventFilter<[BigNumber], { fixedReserve: BigNumber }>;

    "GcFeePercentChanged(uint16)"(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    GcFeePercentChanged(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PaymentTokenChange(address,bool)"(
      paymentToken?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { paymentToken: string; enabled: boolean }
    >;

    PaymentTokenChange(
      paymentToken?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { paymentToken: string; enabled: boolean }
    >;

    "RentalPeriodExtended(uint256,address,address,uint112,uint112,uint32,uint32,uint32)"(
      rentalTokenId?: BigNumberish | null,
      renter?: string | null,
      paymentToken?: null,
      poolFee?: null,
      serviceFee?: null,
      endTime?: null,
      renterOnlyReturnTime?: null,
      enterpriseOnlyCollectionTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, number, number, number],
      {
        rentalTokenId: BigNumber;
        renter: string;
        paymentToken: string;
        poolFee: BigNumber;
        serviceFee: BigNumber;
        endTime: number;
        renterOnlyReturnTime: number;
        enterpriseOnlyCollectionTime: number;
      }
    >;

    RentalPeriodExtended(
      rentalTokenId?: BigNumberish | null,
      renter?: string | null,
      paymentToken?: null,
      poolFee?: null,
      serviceFee?: null,
      endTime?: null,
      renterOnlyReturnTime?: null,
      enterpriseOnlyCollectionTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, number, number, number],
      {
        rentalTokenId: BigNumber;
        renter: string;
        paymentToken: string;
        poolFee: BigNumber;
        serviceFee: BigNumber;
        endTime: number;
        renterOnlyReturnTime: number;
        enterpriseOnlyCollectionTime: number;
      }
    >;

    "RentalReturned(uint256,address,address,uint112,uint112,address,uint256,uint256)"(
      rentalTokenId?: BigNumberish | null,
      returner?: string | null,
      powerToken?: string | null,
      rentalAmount?: null,
      gcRewardAmount?: null,
      gcRewardToken?: null,
      totalReserve?: null,
      totalUsedReserve?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ],
      {
        rentalTokenId: BigNumber;
        returner: string;
        powerToken: string;
        rentalAmount: BigNumber;
        gcRewardAmount: BigNumber;
        gcRewardToken: string;
        totalReserve: BigNumber;
        totalUsedReserve: BigNumber;
      }
    >;

    RentalReturned(
      rentalTokenId?: BigNumberish | null,
      returner?: string | null,
      powerToken?: string | null,
      rentalAmount?: null,
      gcRewardAmount?: null,
      gcRewardToken?: null,
      totalReserve?: null,
      totalUsedReserve?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ],
      {
        rentalTokenId: BigNumber;
        returner: string;
        powerToken: string;
        rentalAmount: BigNumber;
        gcRewardAmount: BigNumber;
        gcRewardToken: string;
        totalReserve: BigNumber;
        totalUsedReserve: BigNumber;
      }
    >;

    "Rented(uint256,address,address,address,uint112,uint112,uint112,uint112,uint32,uint32,uint32,uint32,uint256,uint256)"(
      rentalTokenId?: BigNumberish | null,
      renter?: string | null,
      powerToken?: string | null,
      paymentToken?: null,
      rentalAmount?: null,
      poolFee?: null,
      serviceFee?: null,
      gcFee?: null,
      startTime?: null,
      endTime?: null,
      renterOnlyReturnTime?: null,
      enterpriseOnlyCollectionTime?: null,
      totalReserve?: null,
      totalUsedReserve?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber
      ],
      {
        rentalTokenId: BigNumber;
        renter: string;
        powerToken: string;
        paymentToken: string;
        rentalAmount: BigNumber;
        poolFee: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
        startTime: number;
        endTime: number;
        renterOnlyReturnTime: number;
        enterpriseOnlyCollectionTime: number;
        totalReserve: BigNumber;
        totalUsedReserve: BigNumber;
      }
    >;

    Rented(
      rentalTokenId?: BigNumberish | null,
      renter?: string | null,
      powerToken?: string | null,
      paymentToken?: null,
      rentalAmount?: null,
      poolFee?: null,
      serviceFee?: null,
      gcFee?: null,
      startTime?: null,
      endTime?: null,
      renterOnlyReturnTime?: null,
      enterpriseOnlyCollectionTime?: null,
      totalReserve?: null,
      totalUsedReserve?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber
      ],
      {
        rentalTokenId: BigNumber;
        renter: string;
        powerToken: string;
        paymentToken: string;
        rentalAmount: BigNumber;
        poolFee: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
        startTime: number;
        endTime: number;
        renterOnlyReturnTime: number;
        enterpriseOnlyCollectionTime: number;
        totalReserve: BigNumber;
        totalUsedReserve: BigNumber;
      }
    >;

    "RenterOnlyReturnPeriodChanged(uint32)"(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    RenterOnlyReturnPeriodChanged(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    "ServiceRegistered(address)"(
      powerToken?: string | null
    ): TypedEventFilter<[string], { powerToken: string }>;

    ServiceRegistered(
      powerToken?: string | null
    ): TypedEventFilter<[string], { powerToken: string }>;

    "StakeChanged(uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      stakeTokenId?: BigNumberish | null,
      staker?: string | null,
      operation?: BigNumberish | null,
      amountDelta?: null,
      amount?: null,
      sharesDelta?: null,
      shares?: null,
      totalShares?: null,
      totalReserve?: null,
      totalUsedReserve?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        stakeTokenId: BigNumber;
        staker: string;
        operation: number;
        amountDelta: BigNumber;
        amount: BigNumber;
        sharesDelta: BigNumber;
        shares: BigNumber;
        totalShares: BigNumber;
        totalReserve: BigNumber;
        totalUsedReserve: BigNumber;
      }
    >;

    StakeChanged(
      stakeTokenId?: BigNumberish | null,
      staker?: string | null,
      operation?: BigNumberish | null,
      amountDelta?: null,
      amount?: null,
      sharesDelta?: null,
      shares?: null,
      totalShares?: null,
      totalReserve?: null,
      totalUsedReserve?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        stakeTokenId: BigNumber;
        staker: string;
        operation: number;
        amountDelta: BigNumber;
        amount: BigNumber;
        sharesDelta: BigNumber;
        shares: BigNumber;
        totalShares: BigNumber;
        totalReserve: BigNumber;
        totalUsedReserve: BigNumber;
      }
    >;

    "StreamingReserveChanged(uint112,uint112)"(
      streamingReserve?: null,
      streamingReserveTarget?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { streamingReserve: BigNumber; streamingReserveTarget: BigNumber }
    >;

    StreamingReserveChanged(
      streamingReserve?: null,
      streamingReserveTarget?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { streamingReserve: BigNumber; streamingReserveTarget: BigNumber }
    >;

    "StreamingReserveHalvingPeriodChanged(uint32)"(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    StreamingReserveHalvingPeriodChanged(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;
  };

  estimateGas: {
    claimStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateRentalFee(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendRentalPeriod(
      rentalTokenId: BigNumberish,
      paymentToken: string,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseUri(overrides?: CallOverrides): Promise<BigNumber>;

    getBondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    getConverter(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterpriseCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterpriseOnlyCollectionPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnterpriseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterpriseWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getGCFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getRentalAgreement(
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRentalToken(overrides?: CallOverrides): Promise<BigNumber>;

    getRenterOnlyReturnPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreamingReserveHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsedReserve(overrides?: CallOverrides): Promise<BigNumber>;

    increaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeTokens(
      enterpriseToken: string,
      stakeToken: string,
      rentalToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerService(
      serviceName: string,
      serviceSymbol: string,
      energyGapHalvingPeriod: BigNumberish,
      baseRate: BigNumberish,
      baseToken: string,
      serviceFeePercent: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      minGCFee: BigNumberish,
      swappingEnabledForever: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rent(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnRental(
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseUri(
      baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConverter(
      newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnterpriseOnlyCollectionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnterpriseWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRenterOnlyReturnPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStreamingReserveHalvingPeriod(
      streamingReserveHalvingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdownEnterpriseForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferRental(
      from: string,
      to: string,
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      stakeTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(
      enterpriseFactory: string,
      enterpriseImplementation: string,
      rentalTokenImplementation: string,
      stakeTokenImplementation: string,
      powerTokenImplementation: string,
      powerTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateRentalFee(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendRentalPeriod(
      rentalTokenId: BigNumberish,
      paymentToken: string,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableReserve(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConverter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnterpriseCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterpriseOnlyCollectionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterpriseToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterpriseWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGCFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRentalAgreement(
      rentalTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRentalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRenterOnlyReturnPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStake(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingReward(
      stakeTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStreamingReserveHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsedReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseStake(
      stakeTokenId: BigNumberish,
      stakeAmountDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeTokens(
      enterpriseToken: string,
      stakeToken: string,
      rentalToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerService(
      serviceName: string,
      serviceSymbol: string,
      energyGapHalvingPeriod: BigNumberish,
      baseRate: BigNumberish,
      baseToken: string,
      serviceFeePercent: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      minGCFee: BigNumberish,
      swappingEnabledForever: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rent(
      powerToken: string,
      paymentToken: string,
      rentalAmount: BigNumberish,
      rentalPeriod: BigNumberish,
      maxPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnRental(
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseUri(
      baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConverter(
      newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnterpriseOnlyCollectionPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnterpriseWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRenterOnlyReturnPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStreamingReserveHalvingPeriod(
      streamingReserveHalvingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdownEnterpriseForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRental(
      from: string,
      to: string,
      rentalTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakeTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      enterpriseFactory: string,
      enterpriseImplementation: string,
      rentalTokenImplementation: string,
      stakeTokenImplementation: string,
      powerTokenImplementation: string,
      powerTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
