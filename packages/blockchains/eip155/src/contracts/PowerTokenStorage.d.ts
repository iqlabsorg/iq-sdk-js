/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PowerTokenStorageInterface extends ethers.utils.Interface {
  functions: {
    "enableSwappingForever()": FunctionFragment;
    "enableTransferForever()": FunctionFragment;
    "getBaseRate()": FunctionFragment;
    "getBaseToken()": FunctionFragment;
    "getEnergyGapHalvingPeriod()": FunctionFragment;
    "getEnterprise()": FunctionFragment;
    "getIndex()": FunctionFragment;
    "getMaxRentalPeriod()": FunctionFragment;
    "getMinGCFee()": FunctionFragment;
    "getMinRentalPeriod()": FunctionFragment;
    "getServiceFeePercent()": FunctionFragment;
    "getState(address)": FunctionFragment;
    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)": FunctionFragment;
    "isAllowedRentalPeriod(uint32)": FunctionFragment;
    "isSwappingEnabled()": FunctionFragment;
    "isTransferEnabled()": FunctionFragment;
    "setBaseRate(uint112,address,uint96)": FunctionFragment;
    "setRentalPeriodLimits(uint32,uint32)": FunctionFragment;
    "setServiceFeePercent(uint16)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "enableSwappingForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTransferForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnergyGapHalvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterprise",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxRentalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinGCFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinRentalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedRentalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwappingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRate",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRentalPeriodLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeePercent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "enableSwappingForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTransferForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnergyGapHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinGCFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwappingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRentalPeriodLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeePercent",
    data: BytesLike
  ): Result;

  events: {
    "BaseRateChanged(uint112,address,uint96)": EventFragment;
    "RentalPeriodLimitsChanged(uint32,uint32)": EventFragment;
    "ServiceFeePercentChanged(uint16)": EventFragment;
    "SwappingEnabled()": EventFragment;
    "TransferEnabled()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RentalPeriodLimitsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceFeePercentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwappingEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferEnabled"): EventFragment;
}

export type BaseRateChangedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    baseRate: BigNumber;
    baseToken: string;
    minGCFee: BigNumber;
  }
>;

export type RentalPeriodLimitsChangedEvent = TypedEvent<
  [number, number] & { minRentalPeriod: number; maxRentalPeriod: number }
>;

export type ServiceFeePercentChangedEvent = TypedEvent<
  [number] & { percent: number }
>;

export type SwappingEnabledEvent = TypedEvent<[] & {}>;

export type TransferEnabledEvent = TypedEvent<[] & {}>;

export class PowerTokenStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PowerTokenStorageInterface;

  functions: {
    enableSwappingForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableTransferForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBaseRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseToken(overrides?: CallOverrides): Promise<[string]>;

    getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<[number]>;

    getEnterprise(overrides?: CallOverrides): Promise<[string]>;

    getIndex(overrides?: CallOverrides): Promise<[number]>;

    getMaxRentalPeriod(overrides?: CallOverrides): Promise<[number]>;

    getMinGCFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinRentalPeriod(overrides?: CallOverrides): Promise<[number]>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<[number]>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          lockedBalance: BigNumber;
          energy: BigNumber;
          timestamp: number;
        }
      ]
    >;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isTransferEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enableSwappingForever(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableTransferForever(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseToken(overrides?: CallOverrides): Promise<string>;

  getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

  getEnterprise(overrides?: CallOverrides): Promise<string>;

  getIndex(overrides?: CallOverrides): Promise<number>;

  getMaxRentalPeriod(overrides?: CallOverrides): Promise<number>;

  getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMinRentalPeriod(overrides?: CallOverrides): Promise<number>;

  getServiceFeePercent(overrides?: CallOverrides): Promise<number>;

  getState(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      lockedBalance: BigNumber;
      energy: BigNumber;
      timestamp: number;
    }
  >;

  "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
    enterprise: string,
    baseToken: string,
    baseRate: BigNumberish,
    minGCFee: BigNumberish,
    serviceFeePercent: BigNumberish,
    energyGapHalvingPeriod: BigNumberish,
    index: BigNumberish,
    minRentalPeriod: BigNumberish,
    maxRentalPeriod: BigNumberish,
    swappingEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    enterprise: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedRentalPeriod(
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSwappingEnabled(overrides?: CallOverrides): Promise<boolean>;

  isTransferEnabled(overrides?: CallOverrides): Promise<boolean>;

  setBaseRate(
    baseRate: BigNumberish,
    baseToken: string,
    minGCFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRentalPeriodLimits(
    minRentalPeriod: BigNumberish,
    maxRentalPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServiceFeePercent(
    newServiceFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enableSwappingForever(overrides?: CallOverrides): Promise<void>;

    enableTransferForever(overrides?: CallOverrides): Promise<void>;

    getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<string>;

    getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

    getEnterprise(overrides?: CallOverrides): Promise<string>;

    getIndex(overrides?: CallOverrides): Promise<number>;

    getMaxRentalPeriod(overrides?: CallOverrides): Promise<number>;

    getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinRentalPeriod(overrides?: CallOverrides): Promise<number>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<number>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        lockedBalance: BigNumber;
        energy: BigNumber;
        timestamp: number;
      }
    >;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      enterprise: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<boolean>;

    isTransferEnabled(overrides?: CallOverrides): Promise<boolean>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BaseRateChanged(uint112,address,uint96)"(
      baseRate?: null,
      baseToken?: null,
      minGCFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { baseRate: BigNumber; baseToken: string; minGCFee: BigNumber }
    >;

    BaseRateChanged(
      baseRate?: null,
      baseToken?: null,
      minGCFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { baseRate: BigNumber; baseToken: string; minGCFee: BigNumber }
    >;

    "RentalPeriodLimitsChanged(uint32,uint32)"(
      minRentalPeriod?: null,
      maxRentalPeriod?: null
    ): TypedEventFilter<
      [number, number],
      { minRentalPeriod: number; maxRentalPeriod: number }
    >;

    RentalPeriodLimitsChanged(
      minRentalPeriod?: null,
      maxRentalPeriod?: null
    ): TypedEventFilter<
      [number, number],
      { minRentalPeriod: number; maxRentalPeriod: number }
    >;

    "ServiceFeePercentChanged(uint16)"(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    ServiceFeePercentChanged(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    "SwappingEnabled()"(): TypedEventFilter<[], {}>;

    SwappingEnabled(): TypedEventFilter<[], {}>;

    "TransferEnabled()"(): TypedEventFilter<[], {}>;

    TransferEnabled(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    enableSwappingForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableTransferForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getEnergyGapHalvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterprise(overrides?: CallOverrides): Promise<BigNumber>;

    getIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxRentalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinRentalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getState(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enableSwappingForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableTransferForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBaseRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnergyGapHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterprise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxRentalPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinGCFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinRentalPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint112,uint96,uint16,uint32,uint16,uint32,uint32,bool)"(
      enterprise: string,
      baseToken: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      serviceFeePercent: BigNumberish,
      energyGapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      swappingEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedRentalPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwappingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRentalPeriodLimits(
      minRentalPeriod: BigNumberish,
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
