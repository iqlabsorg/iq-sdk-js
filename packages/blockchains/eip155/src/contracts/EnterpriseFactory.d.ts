/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EnterpriseFactoryInterface extends ethers.utils.Interface {
  functions: {
    "deploy(string,address,string,uint16,address)": FunctionFragment;
    "deployService(address)": FunctionFragment;
    "getEnterpriseImpl()": FunctionFragment;
    "getPowerTokenImpl()": FunctionFragment;
    "getRentalTokenImpl()": FunctionFragment;
    "getStakeTokenImpl()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployService",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerTokenImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalTokenImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeTokenImpl",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerTokenImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalTokenImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeTokenImpl",
    data: BytesLike
  ): Result;

  events: {
    "EnterpriseDeployed(address,address,string,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnterpriseDeployed"): EventFragment;
}

export type EnterpriseDeployedEvent = TypedEvent<
  [string, string, string, string, string] & {
    creator: string;
    enterpriseToken: string;
    name: string;
    baseUri: string;
    deployed: string;
  }
>;

export class EnterpriseFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EnterpriseFactoryInterface;

  functions: {
    deploy(
      name: string,
      enterpriseToken: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployService(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEnterpriseImpl(overrides?: CallOverrides): Promise<[string]>;

    getPowerTokenImpl(overrides?: CallOverrides): Promise<[string]>;

    getRentalTokenImpl(overrides?: CallOverrides): Promise<[string]>;

    getStakeTokenImpl(overrides?: CallOverrides): Promise<[string]>;
  };

  deploy(
    name: string,
    enterpriseToken: string,
    baseUri: string,
    gcFeePercent: BigNumberish,
    converter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployService(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEnterpriseImpl(overrides?: CallOverrides): Promise<string>;

  getPowerTokenImpl(overrides?: CallOverrides): Promise<string>;

  getRentalTokenImpl(overrides?: CallOverrides): Promise<string>;

  getStakeTokenImpl(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy(
      name: string,
      enterpriseToken: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deployService(admin: string, overrides?: CallOverrides): Promise<string>;

    getEnterpriseImpl(overrides?: CallOverrides): Promise<string>;

    getPowerTokenImpl(overrides?: CallOverrides): Promise<string>;

    getRentalTokenImpl(overrides?: CallOverrides): Promise<string>;

    getStakeTokenImpl(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EnterpriseDeployed(address,address,string,string,address)"(
      creator?: string | null,
      enterpriseToken?: string | null,
      name?: null,
      baseUri?: null,
      deployed?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        creator: string;
        enterpriseToken: string;
        name: string;
        baseUri: string;
        deployed: string;
      }
    >;

    EnterpriseDeployed(
      creator?: string | null,
      enterpriseToken?: string | null,
      name?: null,
      baseUri?: null,
      deployed?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        creator: string;
        enterpriseToken: string;
        name: string;
        baseUri: string;
        deployed: string;
      }
    >;
  };

  estimateGas: {
    deploy(
      name: string,
      enterpriseToken: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployService(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEnterpriseImpl(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerTokenImpl(overrides?: CallOverrides): Promise<BigNumber>;

    getRentalTokenImpl(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTokenImpl(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      name: string,
      enterpriseToken: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployService(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEnterpriseImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPowerTokenImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRentalTokenImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeTokenImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
