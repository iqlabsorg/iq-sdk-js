/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EnterpriseStorageInterface extends ethers.utils.Interface {
  functions: {
    "disablePaymentToken(address)": FunctionFragment;
    "enablePaymentToken(address)": FunctionFragment;
    "getAvailableReserve()": FunctionFragment;
    "getBaseUri()": FunctionFragment;
    "getBondingCurve()": FunctionFragment;
    "getBorrowToken()": FunctionFragment;
    "getBorrowerLoanReturnGracePeriod()": FunctionFragment;
    "getConverter()": FunctionFragment;
    "getEnterpriseCollector()": FunctionFragment;
    "getEnterpriseLoanCollectGracePeriod()": FunctionFragment;
    "getEnterpriseVault()": FunctionFragment;
    "getGCFeePercent()": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getInterestGapHalvingPeriod()": FunctionFragment;
    "getInterestToken()": FunctionFragment;
    "getLiquidityInfo(uint256)": FunctionFragment;
    "getLiquidityToken()": FunctionFragment;
    "getLoanInfo(uint256)": FunctionFragment;
    "getPowerTokens()": FunctionFragment;
    "getProxyAdmin()": FunctionFragment;
    "getReserve()": FunctionFragment;
    "getUsedReserve()": FunctionFragment;
    "initialize(string,string,uint16,address,address,address)": FunctionFragment;
    "initializeTokens(address,address,address)": FunctionFragment;
    "isRegisteredPowerToken(address)": FunctionFragment;
    "isSupportedPaymentToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken(uint256)": FunctionFragment;
    "paymentTokenIndex(address)": FunctionFragment;
    "setBaseUri(string)": FunctionFragment;
    "setBondingCurve(uint256,uint256)": FunctionFragment;
    "setBorrowerLoanReturnGracePeriod(uint32)": FunctionFragment;
    "setConverter(address)": FunctionFragment;
    "setEnterpriseCollector(address)": FunctionFragment;
    "setEnterpriseLoanCollectGracePeriod(uint32)": FunctionFragment;
    "setEnterpriseVault(address)": FunctionFragment;
    "setGcFeePercent(uint16)": FunctionFragment;
    "setInterestGapHalvingPeriod(uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeBorrowToken(address)": FunctionFragment;
    "upgradeEnterprise(address)": FunctionFragment;
    "upgradeInterestToken(address)": FunctionFragment;
    "upgradePowerToken(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "disablePaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowerLoanReturnGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConverter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseLoanCollectGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGCFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInterestGapHalvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsedReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTokens",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredPowerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedPaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokenIndex",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseUri", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBondingCurve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowerLoanReturnGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConverter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnterpriseCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnterpriseLoanCollectGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnterpriseVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGcFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestGapHalvingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeBorrowToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEnterprise",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeInterestToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePowerToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "disablePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowerLoanReturnGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseLoanCollectGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGCFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterestGapHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUsedReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredPowerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowerLoanReturnGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnterpriseCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnterpriseLoanCollectGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnterpriseVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGcFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestGapHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeBorrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeInterestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePowerToken",
    data: BytesLike
  ): Result;

  events: {
    "BaseUriChanged(string)": EventFragment;
    "BondingChanged(uint256,uint256)": EventFragment;
    "BorrowerLoanReturnGracePeriodChanged(uint32)": EventFragment;
    "ConverterChanged(address)": EventFragment;
    "EnterpriseCollectorChanged(address)": EventFragment;
    "EnterpriseLoanCollectGracePeriodChanged(uint32)": EventFragment;
    "EnterpriseShutdown()": EventFragment;
    "EnterpriseVaultChanged(address)": EventFragment;
    "FixedReserveChanged(uint256)": EventFragment;
    "GcFeePercentChanged(uint16)": EventFragment;
    "InterestGapHalvingPeriodChanged(uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentTokenChange(address,bool)": EventFragment;
    "StreamingReserveChanged(uint112,uint112)": EventFragment;
    "TotalSharesChanged(uint256)": EventFragment;
    "UsedReserveChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseUriChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondingChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerLoanReturnGracePeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConverterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterpriseCollectorChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EnterpriseLoanCollectGracePeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterpriseShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterpriseVaultChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedReserveChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GcFeePercentChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InterestGapHalvingPeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamingReserveChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalSharesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsedReserveChanged"): EventFragment;
}

export class EnterpriseStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EnterpriseStorageInterface;

  functions: {
    disablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseUri(overrides?: CallOverrides): Promise<[string]>;

    getBondingCurve(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }>;

    getBorrowToken(overrides?: CallOverrides): Promise<[string]>;

    getBorrowerLoanReturnGracePeriod(
      overrides?: CallOverrides
    ): Promise<[number]>;

    getConverter(overrides?: CallOverrides): Promise<[string]>;

    getEnterpriseCollector(overrides?: CallOverrides): Promise<[string]>;

    getEnterpriseLoanCollectGracePeriod(
      overrides?: CallOverrides
    ): Promise<[number]>;

    getEnterpriseVault(overrides?: CallOverrides): Promise<[string]>;

    getGCFeePercent(overrides?: CallOverrides): Promise<[number]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        name: string;
        baseUri: string;
        totalShares: BigNumber;
        interestGapHalvingPeriod: number;
        borrowerLoanReturnGracePeriod: number;
        enterpriseLoanCollectGracePeriod: number;
        gcFeePercent: number;
        fixedReserve: BigNumber;
        usedReserve: BigNumber;
        streamingReserve: BigNumber;
        streamingReserveTarget: BigNumber;
        streamingReserveUpdated: number;
      }
    >;

    getInterestGapHalvingPeriod(overrides?: CallOverrides): Promise<[number]>;

    getInterestToken(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityInfo(
      interestTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          shares: BigNumber;
          block: BigNumber;
        }
      ]
    >;

    getLiquidityToken(overrides?: CallOverrides): Promise<[string]>;

    getLoanInfo(
      borrowTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          number,
          number,
          number,
          number,
          number,
          BigNumber,
          number
        ] & {
          amount: BigNumber;
          powerTokenIndex: number;
          borrowingTime: number;
          maturityTime: number;
          borrowerReturnGraceTime: number;
          enterpriseCollectGraceTime: number;
          gcFee: BigNumber;
          gcFeeTokenIndex: number;
        }
      ]
    >;

    getPowerTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getProxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    getReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUsedReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeTokens(
      liquidityToken: string,
      interestToken: string,
      borrowToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    setBaseUri(
      baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowerLoanReturnGracePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConverter(
      newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnterpriseLoanCollectGracePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnterpriseVault(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestGapHalvingPeriod(
      interestGapHalvingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeBorrowToken(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeEnterprise(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeInterestToken(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePowerToken(
      powerToken: string,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  disablePaymentToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enablePaymentToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseUri(overrides?: CallOverrides): Promise<string>;

  getBondingCurve(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }>;

  getBorrowToken(overrides?: CallOverrides): Promise<string>;

  getBorrowerLoanReturnGracePeriod(overrides?: CallOverrides): Promise<number>;

  getConverter(overrides?: CallOverrides): Promise<string>;

  getEnterpriseCollector(overrides?: CallOverrides): Promise<string>;

  getEnterpriseLoanCollectGracePeriod(
    overrides?: CallOverrides
  ): Promise<number>;

  getEnterpriseVault(overrides?: CallOverrides): Promise<string>;

  getGCFeePercent(overrides?: CallOverrides): Promise<number>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      name: string;
      baseUri: string;
      totalShares: BigNumber;
      interestGapHalvingPeriod: number;
      borrowerLoanReturnGracePeriod: number;
      enterpriseLoanCollectGracePeriod: number;
      gcFeePercent: number;
      fixedReserve: BigNumber;
      usedReserve: BigNumber;
      streamingReserve: BigNumber;
      streamingReserveTarget: BigNumber;
      streamingReserveUpdated: number;
    }
  >;

  getInterestGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

  getInterestToken(overrides?: CallOverrides): Promise<string>;

  getLiquidityInfo(
    interestTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      shares: BigNumber;
      block: BigNumber;
    }
  >;

  getLiquidityToken(overrides?: CallOverrides): Promise<string>;

  getLoanInfo(
    borrowTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, BigNumber, number] & {
      amount: BigNumber;
      powerTokenIndex: number;
      borrowingTime: number;
      maturityTime: number;
      borrowerReturnGraceTime: number;
      enterpriseCollectGraceTime: number;
      gcFee: BigNumber;
      gcFeeTokenIndex: number;
    }
  >;

  getPowerTokens(overrides?: CallOverrides): Promise<string[]>;

  getProxyAdmin(overrides?: CallOverrides): Promise<string>;

  getReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getUsedReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "initialize(string,string,uint16,address,address,address)"(
    enterpriseName: string,
    baseUri: string,
    gcFeePercent: BigNumberish,
    converter: string,
    proxyAdmin: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    initialOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeTokens(
    liquidityToken: string,
    interestToken: string,
    borrowToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegisteredPowerToken(
    powerToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportedPaymentToken(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paymentTokenIndex(token: string, overrides?: CallOverrides): Promise<number>;

  setBaseUri(
    baseUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingCurve(
    pole: BigNumberish,
    slope: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowerLoanReturnGracePeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConverter(
    newConverter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnterpriseCollector(
    newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnterpriseLoanCollectGracePeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnterpriseVault(
    newVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGcFeePercent(
    newGcFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestGapHalvingPeriod(
    interestGapHalvingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeBorrowToken(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeEnterprise(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeInterestToken(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePowerToken(
    powerToken: string,
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disablePaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enablePaymentToken(token: string, overrides?: CallOverrides): Promise<void>;

    getAvailableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseUri(overrides?: CallOverrides): Promise<string>;

    getBondingCurve(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { pole: BigNumber; slope: BigNumber }>;

    getBorrowToken(overrides?: CallOverrides): Promise<string>;

    getBorrowerLoanReturnGracePeriod(
      overrides?: CallOverrides
    ): Promise<number>;

    getConverter(overrides?: CallOverrides): Promise<string>;

    getEnterpriseCollector(overrides?: CallOverrides): Promise<string>;

    getEnterpriseLoanCollectGracePeriod(
      overrides?: CallOverrides
    ): Promise<number>;

    getEnterpriseVault(overrides?: CallOverrides): Promise<string>;

    getGCFeePercent(overrides?: CallOverrides): Promise<number>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        name: string;
        baseUri: string;
        totalShares: BigNumber;
        interestGapHalvingPeriod: number;
        borrowerLoanReturnGracePeriod: number;
        enterpriseLoanCollectGracePeriod: number;
        gcFeePercent: number;
        fixedReserve: BigNumber;
        usedReserve: BigNumber;
        streamingReserve: BigNumber;
        streamingReserveTarget: BigNumber;
        streamingReserveUpdated: number;
      }
    >;

    getInterestGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

    getInterestToken(overrides?: CallOverrides): Promise<string>;

    getLiquidityInfo(
      interestTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        shares: BigNumber;
        block: BigNumber;
      }
    >;

    getLiquidityToken(overrides?: CallOverrides): Promise<string>;

    getLoanInfo(
      borrowTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, BigNumber, number] & {
        amount: BigNumber;
        powerTokenIndex: number;
        borrowingTime: number;
        maturityTime: number;
        borrowerReturnGraceTime: number;
        enterpriseCollectGraceTime: number;
        gcFee: BigNumber;
        gcFeeTokenIndex: number;
      }
    >;

    getPowerTokens(overrides?: CallOverrides): Promise<string[]>;

    getProxyAdmin(overrides?: CallOverrides): Promise<string>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getUsedReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeTokens(
      liquidityToken: string,
      interestToken: string,
      borrowToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    paymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<number>;

    setBaseUri(baseUri: string, overrides?: CallOverrides): Promise<void>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowerLoanReturnGracePeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConverter(
      newConverter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnterpriseLoanCollectGracePeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnterpriseVault(
      newVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestGapHalvingPeriod(
      interestGapHalvingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeBorrowToken(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeEnterprise(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeInterestToken(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePowerToken(
      powerToken: string,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BaseUriChanged(
      baseUri?: null
    ): TypedEventFilter<[string], { baseUri: string }>;

    BondingChanged(
      pole?: null,
      slope?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { pole: BigNumber; slope: BigNumber }
    >;

    BorrowerLoanReturnGracePeriodChanged(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    ConverterChanged(
      converter?: null
    ): TypedEventFilter<[string], { converter: string }>;

    EnterpriseCollectorChanged(
      collector?: null
    ): TypedEventFilter<[string], { collector: string }>;

    EnterpriseLoanCollectGracePeriodChanged(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    EnterpriseShutdown(): TypedEventFilter<[], {}>;

    EnterpriseVaultChanged(
      vault?: null
    ): TypedEventFilter<[string], { vault: string }>;

    FixedReserveChanged(
      fixedReserve?: null
    ): TypedEventFilter<[BigNumber], { fixedReserve: BigNumber }>;

    GcFeePercentChanged(
      percent?: null
    ): TypedEventFilter<[number], { percent: number }>;

    InterestGapHalvingPeriodChanged(
      period?: null
    ): TypedEventFilter<[number], { period: number }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PaymentTokenChange(
      paymentToken?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { paymentToken: string; enabled: boolean }
    >;

    StreamingReserveChanged(
      streamingReserve?: null,
      streamingReserveTarget?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { streamingReserve: BigNumber; streamingReserveTarget: BigNumber }
    >;

    TotalSharesChanged(
      totalShares?: null
    ): TypedEventFilter<[BigNumber], { totalShares: BigNumber }>;

    UsedReserveChanged(
      fixedReserve?: null
    ): TypedEventFilter<[BigNumber], { fixedReserve: BigNumber }>;
  };

  estimateGas: {
    disablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseUri(overrides?: CallOverrides): Promise<BigNumber>;

    getBondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowerLoanReturnGracePeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConverter(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterpriseCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterpriseLoanCollectGracePeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnterpriseVault(overrides?: CallOverrides): Promise<BigNumber>;

    getGCFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestGapHalvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestToken(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityInfo(
      interestTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityToken(overrides?: CallOverrides): Promise<BigNumber>;

    getLoanInfo(
      borrowTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getUsedReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeTokens(
      liquidityToken: string,
      interestToken: string,
      borrowToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseUri(
      baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowerLoanReturnGracePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConverter(
      newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnterpriseLoanCollectGracePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnterpriseVault(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestGapHalvingPeriod(
      interestGapHalvingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeBorrowToken(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeEnterprise(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeInterestToken(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePowerToken(
      powerToken: string,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enablePaymentToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableReserve(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowerLoanReturnGracePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConverter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnterpriseCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterpriseLoanCollectGracePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnterpriseVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGCFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestGapHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityInfo(
      interestTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLoanInfo(
      borrowTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsedReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(string,string,uint16,address,address,address)"(
      enterpriseName: string,
      baseUri: string,
      gcFeePercent: BigNumberish,
      converter: string,
      proxyAdmin: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      initialOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeTokens(
      liquidityToken: string,
      interestToken: string,
      borrowToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredPowerToken(
      powerToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedPaymentToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentTokenIndex(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseUri(
      baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingCurve(
      pole: BigNumberish,
      slope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowerLoanReturnGracePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConverter(
      newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnterpriseCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnterpriseLoanCollectGracePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnterpriseVault(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGcFeePercent(
      newGcFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestGapHalvingPeriod(
      interestGapHalvingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeBorrowToken(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeEnterprise(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeInterestToken(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePowerToken(
      powerToken: string,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
