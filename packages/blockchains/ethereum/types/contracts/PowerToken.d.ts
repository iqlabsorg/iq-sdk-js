/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PowerTokenInterface extends ethers.utils.Interface {
  functions: {
    "allowPerpetualForever()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "availableBalanceOf(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "energyAt(address,uint32)": FunctionFragment;
    "estimateLoan(address,uint112,uint32)": FunctionFragment;
    "estimateLoanDetailed(address,uint112,uint32)": FunctionFragment;
    "forceTransfer(address,address,uint256)": FunctionFragment;
    "getAllowsPerpetual()": FunctionFragment;
    "getBaseRate()": FunctionFragment;
    "getBaseToken()": FunctionFragment;
    "getEnterprise()": FunctionFragment;
    "getGapHalvingPeriod()": FunctionFragment;
    "getIndex()": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getLambda()": FunctionFragment;
    "getMaxLoanDuration()": FunctionFragment;
    "getMinGCFee()": FunctionFragment;
    "getMinLoanDuration()": FunctionFragment;
    "getServiceFeePercent()": FunctionFragment;
    "getState(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,uint112,uint96,uint32,uint16,address,uint32,uint32,uint16,bool)": FunctionFragment;
    "isAllowedLoanDuration(uint32)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "notifyNewLoan(uint256)": FunctionFragment;
    "setBaseRate(uint112,address,uint96)": FunctionFragment;
    "setLambda(uint256)": FunctionFragment;
    "setLoanDurationLimits(uint32,uint32)": FunctionFragment;
    "setServiceFeePercent(uint16)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unwrap(uint256)": FunctionFragment;
    "wrap(uint256)": FunctionFragment;
    "wrapTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowPerpetualForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "energyAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateLoan",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateLoanDetailed",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowsPerpetual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterprise",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGapHalvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getIndex", values?: undefined): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLambda", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxLoanDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinGCFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinLoanDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedLoanDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyNewLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRate",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLambda",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanDurationLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wrap", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "wrapTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowPerpetualForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "energyAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateLoanDetailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowsPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGapHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLambda", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinGCFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyNewLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLambda", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLoanDurationLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapTo", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class PowerToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PowerTokenInterface;

  functions: {
    allowPerpetualForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allowPerpetualForever()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "availableBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnFrom(address,uint256)"(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "energyAt(address,uint32)"(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateLoan(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "estimateLoan(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateLoanDetailed(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        interest: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
      }
    >;

    "estimateLoanDetailed(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        interest: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
      }
    >;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllowsPerpetual(overrides?: CallOverrides): Promise<[boolean]>;

    "getAllowsPerpetual()"(overrides?: CallOverrides): Promise<[boolean]>;

    getBaseRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBaseRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseToken(overrides?: CallOverrides): Promise<[string]>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<[string]>;

    getEnterprise(overrides?: CallOverrides): Promise<[string]>;

    "getEnterprise()"(overrides?: CallOverrides): Promise<[string]>;

    getGapHalvingPeriod(overrides?: CallOverrides): Promise<[number]>;

    "getGapHalvingPeriod()"(overrides?: CallOverrides): Promise<[number]>;

    getIndex(overrides?: CallOverrides): Promise<[number]>;

    "getIndex()"(overrides?: CallOverrides): Promise<[number]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        name: string;
        symbol: string;
        baseRate: BigNumber;
        minGCFee: BigNumber;
        gapHalvingPeriod: number;
        index: number;
        baseToken: string;
        minLoanDuration: number;
        maxLoanDuration: number;
        serviceFeePercent: number;
        allowsPerpetual: boolean;
      }
    >;

    "getInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        name: string;
        symbol: string;
        baseRate: BigNumber;
        minGCFee: BigNumber;
        gapHalvingPeriod: number;
        index: number;
        baseToken: string;
        minLoanDuration: number;
        maxLoanDuration: number;
        serviceFeePercent: number;
        allowsPerpetual: boolean;
      }
    >;

    getLambda(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLambda()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxLoanDuration(overrides?: CallOverrides): Promise<[number]>;

    "getMaxLoanDuration()"(overrides?: CallOverrides): Promise<[number]>;

    getMinGCFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMinGCFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinLoanDuration(overrides?: CallOverrides): Promise<[number]>;

    "getMinLoanDuration()"(overrides?: CallOverrides): Promise<[number]>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<[number]>;

    "getServiceFeePercent()"(overrides?: CallOverrides): Promise<[number]>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          lockedBalance: BigNumber;
          energy: BigNumber;
          timestamp: number;
        }
      ]
    >;

    "getState(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, number] & {
          lockedBalance: BigNumber;
          energy: BigNumber;
          timestamp: number;
        }
      ]
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,uint112,uint96,uint32,uint16,address,uint32,uint32,uint16,bool)"(
      enterprise: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      gapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      baseToken: string,
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      serviceFeePercent: BigNumberish,
      allowsPerpetual: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string)"(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedLoanDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAllowedLoanDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    notifyNewLoan(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "notifyNewLoan(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBaseRate(uint112,address,uint96)"(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLambda(
      lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLambda(uint256)"(
      lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanDurationLimits(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLoanDurationLimits(uint32,uint32)"(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setServiceFeePercent(uint16)"(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrap(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unwrap(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrap(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wrap(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "wrapTo(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowPerpetualForever(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allowPerpetualForever()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "availableBalanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnFrom(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnFrom(address,uint256)"(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  energyAt(
    who: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "energyAt(address,uint32)"(
    who: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateLoan(
    paymentToken: string,
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "estimateLoan(address,uint112,uint32)"(
    paymentToken: string,
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateLoanDetailed(
    paymentToken: string,
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      interest: BigNumber;
      serviceFee: BigNumber;
      gcFee: BigNumber;
    }
  >;

  "estimateLoanDetailed(address,uint112,uint32)"(
    paymentToken: string,
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      interest: BigNumber;
      serviceFee: BigNumber;
      gcFee: BigNumber;
    }
  >;

  forceTransfer(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceTransfer(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllowsPerpetual(overrides?: CallOverrides): Promise<boolean>;

  "getAllowsPerpetual()"(overrides?: CallOverrides): Promise<boolean>;

  getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseToken(overrides?: CallOverrides): Promise<string>;

  "getBaseToken()"(overrides?: CallOverrides): Promise<string>;

  getEnterprise(overrides?: CallOverrides): Promise<string>;

  "getEnterprise()"(overrides?: CallOverrides): Promise<string>;

  getGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

  "getGapHalvingPeriod()"(overrides?: CallOverrides): Promise<number>;

  getIndex(overrides?: CallOverrides): Promise<number>;

  "getIndex()"(overrides?: CallOverrides): Promise<number>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      name: string;
      symbol: string;
      baseRate: BigNumber;
      minGCFee: BigNumber;
      gapHalvingPeriod: number;
      index: number;
      baseToken: string;
      minLoanDuration: number;
      maxLoanDuration: number;
      serviceFeePercent: number;
      allowsPerpetual: boolean;
    }
  >;

  "getInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      string,
      number,
      number,
      number,
      boolean
    ] & {
      name: string;
      symbol: string;
      baseRate: BigNumber;
      minGCFee: BigNumber;
      gapHalvingPeriod: number;
      index: number;
      baseToken: string;
      minLoanDuration: number;
      maxLoanDuration: number;
      serviceFeePercent: number;
      allowsPerpetual: boolean;
    }
  >;

  getLambda(overrides?: CallOverrides): Promise<BigNumber>;

  "getLambda()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxLoanDuration(overrides?: CallOverrides): Promise<number>;

  "getMaxLoanDuration()"(overrides?: CallOverrides): Promise<number>;

  getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getMinGCFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMinLoanDuration(overrides?: CallOverrides): Promise<number>;

  "getMinLoanDuration()"(overrides?: CallOverrides): Promise<number>;

  getServiceFeePercent(overrides?: CallOverrides): Promise<number>;

  "getServiceFeePercent()"(overrides?: CallOverrides): Promise<number>;

  getState(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      lockedBalance: BigNumber;
      energy: BigNumber;
      timestamp: number;
    }
  >;

  "getState(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      lockedBalance: BigNumber;
      energy: BigNumber;
      timestamp: number;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,uint112,uint96,uint32,uint16,address,uint32,uint32,uint16,bool)"(
    enterprise: string,
    baseRate: BigNumberish,
    minGCFee: BigNumberish,
    gapHalvingPeriod: BigNumberish,
    index: BigNumberish,
    baseToken: string,
    minLoanDuration: BigNumberish,
    maxLoanDuration: BigNumberish,
    serviceFeePercent: BigNumberish,
    allowsPerpetual: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string)"(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    enterprise: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedLoanDuration(
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllowedLoanDuration(uint32)"(
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  notifyNewLoan(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "notifyNewLoan(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseRate(
    baseRate: BigNumberish,
    baseToken: string,
    minGCFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBaseRate(uint112,address,uint96)"(
    baseRate: BigNumberish,
    baseToken: string,
    minGCFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLambda(
    lambda: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLambda(uint256)"(
    lambda: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanDurationLimits(
    minLoanDuration: BigNumberish,
    maxLoanDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLoanDurationLimits(uint32,uint32)"(
    minLoanDuration: BigNumberish,
    maxLoanDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServiceFeePercent(
    newServiceFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setServiceFeePercent(uint16)"(
    newServiceFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrap(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unwrap(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrap(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wrap(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapTo(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "wrapTo(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowPerpetualForever(overrides?: CallOverrides): Promise<void>;

    "allowPerpetualForever()"(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnFrom(address,uint256)"(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energyAt(address,uint32)"(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateLoan(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateLoan(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateLoanDetailed(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        interest: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
      }
    >;

    "estimateLoanDetailed(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        interest: BigNumber;
        serviceFee: BigNumber;
        gcFee: BigNumber;
      }
    >;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "forceTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllowsPerpetual(overrides?: CallOverrides): Promise<boolean>;

    "getAllowsPerpetual()"(overrides?: CallOverrides): Promise<boolean>;

    getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<string>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<string>;

    getEnterprise(overrides?: CallOverrides): Promise<string>;

    "getEnterprise()"(overrides?: CallOverrides): Promise<string>;

    getGapHalvingPeriod(overrides?: CallOverrides): Promise<number>;

    "getGapHalvingPeriod()"(overrides?: CallOverrides): Promise<number>;

    getIndex(overrides?: CallOverrides): Promise<number>;

    "getIndex()"(overrides?: CallOverrides): Promise<number>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        name: string;
        symbol: string;
        baseRate: BigNumber;
        minGCFee: BigNumber;
        gapHalvingPeriod: number;
        index: number;
        baseToken: string;
        minLoanDuration: number;
        maxLoanDuration: number;
        serviceFeePercent: number;
        allowsPerpetual: boolean;
      }
    >;

    "getInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        number,
        boolean
      ] & {
        name: string;
        symbol: string;
        baseRate: BigNumber;
        minGCFee: BigNumber;
        gapHalvingPeriod: number;
        index: number;
        baseToken: string;
        minLoanDuration: number;
        maxLoanDuration: number;
        serviceFeePercent: number;
        allowsPerpetual: boolean;
      }
    >;

    getLambda(overrides?: CallOverrides): Promise<BigNumber>;

    "getLambda()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLoanDuration(overrides?: CallOverrides): Promise<number>;

    "getMaxLoanDuration()"(overrides?: CallOverrides): Promise<number>;

    getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinGCFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLoanDuration(overrides?: CallOverrides): Promise<number>;

    "getMinLoanDuration()"(overrides?: CallOverrides): Promise<number>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<number>;

    "getServiceFeePercent()"(overrides?: CallOverrides): Promise<number>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        lockedBalance: BigNumber;
        energy: BigNumber;
        timestamp: number;
      }
    >;

    "getState(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        lockedBalance: BigNumber;
        energy: BigNumber;
        timestamp: number;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(address,uint112,uint96,uint32,uint16,address,uint32,uint32,uint16,bool)"(
      enterprise: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      gapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      baseToken: string,
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      serviceFeePercent: BigNumberish,
      allowsPerpetual: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string)"(
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      enterprise: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowedLoanDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedLoanDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    notifyNewLoan(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyNewLoan(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseRate(uint112,address,uint96)"(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLambda(lambda: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setLambda(uint256)"(
      lambda: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanDurationLimits(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLoanDurationLimits(uint32,uint32)"(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setServiceFeePercent(uint16)"(
      newServiceFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unwrap(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "unwrap(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wrap(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "wrap(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wrapTo(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "wrapTo(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowPerpetualForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allowPerpetualForever()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnFrom(address,uint256)"(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energyAt(address,uint32)"(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateLoan(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateLoan(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateLoanDetailed(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateLoanDetailed(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllowsPerpetual(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllowsPerpetual()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEnterprise(overrides?: CallOverrides): Promise<BigNumber>;

    "getEnterprise()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGapHalvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getGapHalvingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLambda(overrides?: CallOverrides): Promise<BigNumber>;

    "getLambda()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLoanDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxLoanDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinGCFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinGCFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLoanDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinLoanDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getServiceFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "getServiceFeePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    getState(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getState(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,uint112,uint96,uint32,uint16,address,uint32,uint32,uint16,bool)"(
      enterprise: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      gapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      baseToken: string,
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      serviceFeePercent: BigNumberish,
      allowsPerpetual: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string,string)"(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedLoanDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedLoanDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    notifyNewLoan(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "notifyNewLoan(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBaseRate(uint112,address,uint96)"(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLambda(
      lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLambda(uint256)"(
      lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanDurationLimits(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLoanDurationLimits(uint32,uint32)"(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setServiceFeePercent(uint16)"(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrap(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unwrap(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrap(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wrap(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "wrapTo(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowPerpetualForever(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allowPerpetualForever()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnFrom(address,uint256)"(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    energyAt(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "energyAt(address,uint32)"(
      who: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateLoan(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateLoan(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateLoanDetailed(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateLoanDetailed(address,uint112,uint32)"(
      paymentToken: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceTransfer(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceTransfer(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllowsPerpetual(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllowsPerpetual()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBaseRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBaseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnterprise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEnterprise()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGapHalvingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGapHalvingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLambda(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLambda()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLoanDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxLoanDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinGCFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMinGCFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinLoanDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinLoanDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getServiceFeePercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getState(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint112,uint96,uint32,uint16,address,uint32,uint32,uint16,bool)"(
      enterprise: string,
      baseRate: BigNumberish,
      minGCFee: BigNumberish,
      gapHalvingPeriod: BigNumberish,
      index: BigNumberish,
      baseToken: string,
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      serviceFeePercent: BigNumberish,
      allowsPerpetual: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string)"(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      enterprise: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedLoanDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedLoanDuration(uint32)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyNewLoan(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "notifyNewLoan(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseRate(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseRate(uint112,address,uint96)"(
      baseRate: BigNumberish,
      baseToken: string,
      minGCFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLambda(
      lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLambda(uint256)"(
      lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanDurationLimits(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLoanDurationLimits(uint32,uint32)"(
      minLoanDuration: BigNumberish,
      maxLoanDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeePercent(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setServiceFeePercent(uint16)"(
      newServiceFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrap(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unwrap(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrap(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wrap(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "wrapTo(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
