/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EnterpriseInterface extends ethers.utils.Interface {
  functions: {
    "availableReserve()": FunctionFragment;
    "baseUri()": FunctionFragment;
    "borrow(address,address,uint112,uint256,uint32,uint8)": FunctionFragment;
    "burn(address,uint256,uint112)": FunctionFragment;
    "collectedInterest(address)": FunctionFragment;
    "estimateBorrow(address,address,uint112,uint32,uint8,uint32)": FunctionFragment;
    "estimateRefund(address,address,uint256,uint112,uint32)": FunctionFragment;
    "iToken()": FunctionFragment;
    "initialize(string,address,string,address,address)": FunctionFragment;
    "isAllowedLoanDuration(address,uint32)": FunctionFragment;
    "isAllowedRefundCurvatures(address,uint8)": FunctionFragment;
    "lend(uint256,uint32)": FunctionFragment;
    "liquidityToken()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerService(string,string,uint32,uint112,uint32,uint32[],uint8[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserve()": FunctionFragment;
    "services(address)": FunctionFragment;
    "states(address,uint32,uint8)": FunctionFragment;
    "supportedInterestTokens(uint256)": FunctionFragment;
    "supportedInterestTokensIndex(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLiquidity(uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseUri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateBorrow",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRefund",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "iToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedLoanDuration",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedRefundCurvatures",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerService",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(functionFragment: "services", values: [string]): string;
  encodeFunctionData(
    functionFragment: "states",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedInterestTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedInterestTokensIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectedInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedRefundCurvatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "services", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "states", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedInterestTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedInterestTokensIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "Borrowed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ServiceRegistered(address,uint32,uint112,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceRegistered"): EventFragment;
}

export class Enterprise extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EnterpriseInterface;

  functions: {
    availableReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    "availableReserve()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseUri(overrides?: CallOverrides): Promise<[string]>;

    "baseUri()"(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(address,address,uint112,uint256,uint32,uint8)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(address,uint256,uint112)"(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectedInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collectedInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateBorrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "estimateBorrow(address,address,uint112,uint32,uint8,uint32)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateRefund(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken: string; amount: BigNumber }
    >;

    "estimateRefund(address,address,uint256,uint112,uint32)"(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken: string; amount: BigNumber }
    >;

    iToken(overrides?: CallOverrides): Promise<[string]>;

    "iToken()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,address,string,address,address)"(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedLoanDuration(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAllowedLoanDuration(address,uint32)"(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowedRefundCurvatures(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAllowedRefundCurvatures(address,uint8)"(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lend(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend(uint256,uint32)"(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityToken(overrides?: CallOverrides): Promise<[string]>;

    "liquidityToken()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    registerService(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerService(string,string,uint32,uint112,uint32,uint32[],uint8[])"(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reserve()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    services(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        borrowed: BigNumber;
        factor: BigNumber;
        lastDeal: number;
        interestRateHalvingPeriod: number;
      }
    >;

    "services(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        borrowed: BigNumber;
        factor: BigNumber;
        lastDeal: number;
        interestRateHalvingPeriod: number;
      }
    >;

    states(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { plannedBalance: BigNumber; timestamp: number }
    >;

    "states(address,uint32,uint8)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { plannedBalance: BigNumber; timestamp: number }
    >;

    supportedInterestTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "supportedInterestTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedInterestTokensIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "supportedInterestTokensIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLiquidity(uint256,uint256,address)"(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  availableReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "availableReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  baseUri(overrides?: CallOverrides): Promise<string>;

  "baseUri()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    _powerToken: string,
    _interestPaymentToken: string,
    _amount: BigNumberish,
    _maximumInterest: BigNumberish,
    _duration: BigNumberish,
    _refundCurvature: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(address,address,uint112,uint256,uint32,uint8)"(
    _powerToken: string,
    _interestPaymentToken: string,
    _amount: BigNumberish,
    _maximumInterest: BigNumberish,
    _duration: BigNumberish,
    _refundCurvature: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    _powerToken: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(address,uint256,uint112)"(
    _powerToken: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectedInterest(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collectedInterest(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateBorrow(
    _powerToken: string,
    _interestPaymentToken: string,
    _amount: BigNumberish,
    _duration: BigNumberish,
    _refundCurvature: BigNumberish,
    _estimateAtTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "estimateBorrow(address,address,uint112,uint32,uint8,uint32)"(
    _powerToken: string,
    _interestPaymentToken: string,
    _amount: BigNumberish,
    _duration: BigNumberish,
    _refundCurvature: BigNumberish,
    _estimateAtTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateRefund(
    _powerToken: string,
    _tokenHolder: string,
    _tokenId: BigNumberish,
    _amountToBurn: BigNumberish,
    _estimateAt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { paymentToken: string; amount: BigNumber }>;

  "estimateRefund(address,address,uint256,uint112,uint32)"(
    _powerToken: string,
    _tokenHolder: string,
    _tokenId: BigNumberish,
    _amountToBurn: BigNumberish,
    _estimateAt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { paymentToken: string; amount: BigNumber }>;

  iToken(overrides?: CallOverrides): Promise<string>;

  "iToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _name: string,
    _liquidityToken: string,
    _baseUri: string,
    _interestTokenImpl: string,
    _powerTokenImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,address,string,address,address)"(
    _name: string,
    _liquidityToken: string,
    _baseUri: string,
    _interestTokenImpl: string,
    _powerTokenImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedLoanDuration(
    _token: string,
    _duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllowedLoanDuration(address,uint32)"(
    _token: string,
    _duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowedRefundCurvatures(
    _token: string,
    curvature: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAllowedRefundCurvatures(address,uint8)"(
    _token: string,
    curvature: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lend(
    _liquidityAmount: BigNumberish,
    _halfWithdrawPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend(uint256,uint32)"(
    _liquidityAmount: BigNumberish,
    _halfWithdrawPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityToken(overrides?: CallOverrides): Promise<string>;

  "liquidityToken()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registerService(
    _name: string,
    _symbol: string,
    _halfLife: BigNumberish,
    _factor: BigNumberish,
    _interestRateHalvingPeriod: BigNumberish,
    _allowedLoanDurations: BigNumberish[],
    _allowedRefundCurvatures: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerService(string,string,uint32,uint112,uint32,uint32[],uint8[])"(
    _name: string,
    _symbol: string,
    _halfLife: BigNumberish,
    _factor: BigNumberish,
    _interestRateHalvingPeriod: BigNumberish,
    _allowedLoanDurations: BigNumberish[],
    _allowedRefundCurvatures: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<BigNumber>;

  "reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  services(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      borrowed: BigNumber;
      factor: BigNumber;
      lastDeal: number;
      interestRateHalvingPeriod: number;
    }
  >;

  "services(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      borrowed: BigNumber;
      factor: BigNumber;
      lastDeal: number;
      interestRateHalvingPeriod: number;
    }
  >;

  states(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { plannedBalance: BigNumber; timestamp: number }
  >;

  "states(address,uint32,uint8)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { plannedBalance: BigNumber; timestamp: number }
  >;

  supportedInterestTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "supportedInterestTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedInterestTokensIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "supportedInterestTokensIndex(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    _sharesAmount: BigNumberish,
    _tokenId: BigNumberish,
    _interestToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLiquidity(uint256,uint256,address)"(
    _sharesAmount: BigNumberish,
    _tokenId: BigNumberish,
    _interestToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    availableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "availableReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseUri(overrides?: CallOverrides): Promise<string>;

    "baseUri()"(overrides?: CallOverrides): Promise<string>;

    borrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,address,uint112,uint256,uint32,uint8)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256,uint112)"(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectedInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectedInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateBorrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateBorrow(address,address,uint112,uint32,uint8,uint32)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRefund(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken: string; amount: BigNumber }
    >;

    "estimateRefund(address,address,uint256,uint112,uint32)"(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { paymentToken: string; amount: BigNumber }
    >;

    iToken(overrides?: CallOverrides): Promise<string>;

    "iToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,address,string,address,address)"(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowedLoanDuration(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedLoanDuration(address,uint32)"(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedRefundCurvatures(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAllowedRefundCurvatures(address,uint8)"(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lend(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lend(uint256,uint32)"(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityToken(overrides?: CallOverrides): Promise<string>;

    "liquidityToken()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registerService(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerService(string,string,uint32,uint112,uint32,uint32[],uint8[])"(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    "reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    services(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        borrowed: BigNumber;
        factor: BigNumber;
        lastDeal: number;
        interestRateHalvingPeriod: number;
      }
    >;

    "services(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        borrowed: BigNumber;
        factor: BigNumber;
        lastDeal: number;
        interestRateHalvingPeriod: number;
      }
    >;

    states(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { plannedBalance: BigNumber; timestamp: number }
    >;

    "states(address,uint32,uint8)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { plannedBalance: BigNumber; timestamp: number }
    >;

    supportedInterestTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "supportedInterestTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedInterestTokensIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "supportedInterestTokensIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidity(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLiquidity(uint256,uint256,address)"(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Borrowed(
      powerToken: string | null,
      tokenId: null
    ): TypedEventFilter<
      [string, BigNumber],
      { powerToken: string; tokenId: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ServiceRegistered(
      powerToken: string | null,
      halfLife: null,
      factor: null,
      interestRateHalvingPeriod: null
    ): TypedEventFilter<
      [string, number, BigNumber, number],
      {
        powerToken: string;
        halfLife: number;
        factor: BigNumber;
        interestRateHalvingPeriod: number;
      }
    >;
  };

  estimateGas: {
    availableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "availableReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseUri(overrides?: CallOverrides): Promise<BigNumber>;

    "baseUri()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(address,address,uint112,uint256,uint32,uint8)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(address,uint256,uint112)"(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectedInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectedInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateBorrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateBorrow(address,address,uint112,uint32,uint8,uint32)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRefund(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateRefund(address,address,uint256,uint112,uint32)"(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iToken(overrides?: CallOverrides): Promise<BigNumber>;

    "iToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string,address,string,address,address)"(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedLoanDuration(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedLoanDuration(address,uint32)"(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedRefundCurvatures(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAllowedRefundCurvatures(address,uint8)"(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend(uint256,uint32)"(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityToken(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerService(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerService(string,string,uint32,uint112,uint32,uint32[],uint8[])"(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    "reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    services(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "services(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    states(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "states(address,uint32,uint8)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedInterestTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportedInterestTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedInterestTokensIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportedInterestTokensIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLiquidity(uint256,uint256,address)"(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "availableReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseUri()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(address,address,uint112,uint256,uint32,uint8)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _maximumInterest: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256,uint112)"(
      _powerToken: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectedInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectedInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateBorrow(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateBorrow(address,address,uint112,uint32,uint8,uint32)"(
      _powerToken: string,
      _interestPaymentToken: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _refundCurvature: BigNumberish,
      _estimateAtTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRefund(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateRefund(address,address,uint256,uint112,uint32)"(
      _powerToken: string,
      _tokenHolder: string,
      _tokenId: BigNumberish,
      _amountToBurn: BigNumberish,
      _estimateAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "iToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,address,string,address,address)"(
      _name: string,
      _liquidityToken: string,
      _baseUri: string,
      _interestTokenImpl: string,
      _powerTokenImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedLoanDuration(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedLoanDuration(address,uint32)"(
      _token: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedRefundCurvatures(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowedRefundCurvatures(address,uint8)"(
      _token: string,
      curvature: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend(uint256,uint32)"(
      _liquidityAmount: BigNumberish,
      _halfWithdrawPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerService(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerService(string,string,uint32,uint112,uint32,uint32[],uint8[])"(
      _name: string,
      _symbol: string,
      _halfLife: BigNumberish,
      _factor: BigNumberish,
      _interestRateHalvingPeriod: BigNumberish,
      _allowedLoanDurations: BigNumberish[],
      _allowedRefundCurvatures: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    services(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "services(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    states(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "states(address,uint32,uint8)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedInterestTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportedInterestTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedInterestTokensIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportedInterestTokensIndex(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLiquidity(uint256,uint256,address)"(
      _sharesAmount: BigNumberish,
      _tokenId: BigNumberish,
      _interestToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
