/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IListingStrategyRegistryInterface extends ethers.utils.Interface {
  functions: {
    "checkRegisteredListingStrategy(bytes4)": FunctionFragment;
    "isRegisteredListingStrategy(bytes4)": FunctionFragment;
    "listingController(bytes4)": FunctionFragment;
    "listingStrategy(bytes4)": FunctionFragment;
    "registerListingStrategy(bytes4,(address))": FunctionFragment;
    "setListingController(bytes4,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkRegisteredListingStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredListingStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingController",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerListingStrategy",
    values: [BytesLike, { controller: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingController",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkRegisteredListingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredListingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerListingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingController",
    data: BytesLike
  ): Result;

  events: {
    "ListingStrategyControllerChanged(bytes4,address)": EventFragment;
    "ListingStrategyRegistered(bytes4,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ListingStrategyControllerChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingStrategyRegistered"): EventFragment;
}

export type ListingStrategyControllerChangedEvent = TypedEvent<
  [string, string] & { strategyId: string; newController: string }
>;

export type ListingStrategyRegisteredEvent = TypedEvent<
  [string, string] & { strategyId: string; controller: string }
>;

export class IListingStrategyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IListingStrategyRegistryInterface;

  functions: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[string] & { controller: string }]>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: { controller: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkRegisteredListingStrategy(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  isRegisteredListingStrategy(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listingController(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  listingStrategy(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string] & { controller: string }>;

  registerListingStrategy(
    strategyId: BytesLike,
    config: { controller: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setListingController(
    strategyId: BytesLike,
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { controller: string }>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: { controller: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ListingStrategyControllerChanged(bytes4,address)"(
      strategyId?: BytesLike | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string],
      { strategyId: string; newController: string }
    >;

    ListingStrategyControllerChanged(
      strategyId?: BytesLike | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string],
      { strategyId: string; newController: string }
    >;

    "ListingStrategyRegistered(bytes4,address)"(
      strategyId?: BytesLike | null,
      controller?: string | null
    ): TypedEventFilter<
      [string, string],
      { strategyId: string; controller: string }
    >;

    ListingStrategyRegistered(
      strategyId?: BytesLike | null,
      controller?: string | null
    ): TypedEventFilter<
      [string, string],
      { strategyId: string; controller: string }
    >;
  };

  estimateGas: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: { controller: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: { controller: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
