/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAssetClassRegistryInterface extends ethers.utils.Interface {
  functions: {
    "assetClassConfig(bytes4)": FunctionFragment;
    "checkRegisteredAssetClass(bytes4)": FunctionFragment;
    "isRegisteredAssetClass(bytes4)": FunctionFragment;
    "registerAssetClass(bytes4,(address,address))": FunctionFragment;
    "setAssetClassController(bytes4,address)": FunctionFragment;
    "setAssetClassVault(bytes4,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetClassConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRegisteredAssetClass",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredAssetClass",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAssetClass",
    values: [BytesLike, { vault: string; controller: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetClassController",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetClassVault",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetClassConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRegisteredAssetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredAssetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAssetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetClassController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetClassVault",
    data: BytesLike
  ): Result;

  events: {
    "AssetClassControllerChanged(bytes4,address)": EventFragment;
    "AssetClassRegistered(bytes4,address,address)": EventFragment;
    "AssetClassVaultChanged(bytes4,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AssetClassControllerChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetClassRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetClassVaultChanged"): EventFragment;
}

export type AssetClassControllerChangedEvent = TypedEvent<
  [string, string] & { assetClass: string; newController: string }
>;

export type AssetClassRegisteredEvent = TypedEvent<
  [string, string, string] & {
    assetClass: string;
    controller: string;
    vault: string;
  }
>;

export type AssetClassVaultChangedEvent = TypedEvent<
  [string, string] & { assetClass: string; newVault: string }
>;

export class IAssetClassRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAssetClassRegistryInterface;

  functions: {
    assetClassConfig(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[string, string] & { vault: string; controller: string }]>;

    checkRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    isRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerAssetClass(
      assetClass: BytesLike,
      config: { vault: string; controller: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssetClassController(
      assetClass: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssetClassVault(
      assetClass: BytesLike,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetClassConfig(
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { vault: string; controller: string }>;

  checkRegisteredAssetClass(
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  isRegisteredAssetClass(
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerAssetClass(
    assetClass: BytesLike,
    config: { vault: string; controller: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssetClassController(
    assetClass: BytesLike,
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssetClassVault(
    assetClass: BytesLike,
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetClassConfig(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { vault: string; controller: string }>;

    checkRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAssetClass(
      assetClass: BytesLike,
      config: { vault: string; controller: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetClassController(
      assetClass: BytesLike,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetClassVault(
      assetClass: BytesLike,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetClassControllerChanged(bytes4,address)"(
      assetClass?: BytesLike | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string],
      { assetClass: string; newController: string }
    >;

    AssetClassControllerChanged(
      assetClass?: BytesLike | null,
      newController?: string | null
    ): TypedEventFilter<
      [string, string],
      { assetClass: string; newController: string }
    >;

    "AssetClassRegistered(bytes4,address,address)"(
      assetClass?: BytesLike | null,
      controller?: string | null,
      vault?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetClass: string; controller: string; vault: string }
    >;

    AssetClassRegistered(
      assetClass?: BytesLike | null,
      controller?: string | null,
      vault?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { assetClass: string; controller: string; vault: string }
    >;

    "AssetClassVaultChanged(bytes4,address)"(
      assetClass?: BytesLike | null,
      newVault?: string | null
    ): TypedEventFilter<
      [string, string],
      { assetClass: string; newVault: string }
    >;

    AssetClassVaultChanged(
      assetClass?: BytesLike | null,
      newVault?: string | null
    ): TypedEventFilter<
      [string, string],
      { assetClass: string; newVault: string }
    >;
  };

  estimateGas: {
    assetClassConfig(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAssetClass(
      assetClass: BytesLike,
      config: { vault: string; controller: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssetClassController(
      assetClass: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssetClassVault(
      assetClass: BytesLike,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetClassConfig(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredAssetClass(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAssetClass(
      assetClass: BytesLike,
      config: { vault: string; controller: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssetClassController(
      assetClass: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssetClassVault(
      assetClass: BytesLike,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
