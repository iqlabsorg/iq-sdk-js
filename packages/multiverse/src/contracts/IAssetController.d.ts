/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAssetControllerInterface extends ethers.utils.Interface {
  functions: {
    "assetClass()": FunctionFragment;
    "collectionId((bytes4,bytes))": FunctionFragment;
    "returnAssetFromVault(((bytes4,bytes),uint256),address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transfer(((bytes4,bytes),uint256),address,address,bytes)": FunctionFragment;
    "transferAssetToVault(((bytes4,bytes),uint256),address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetClass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionId",
    values: [{ class: BytesLike; data: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "returnAssetFromVault",
    values: [
      { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAssetToVault",
    values: [
      { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      string,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "assetClass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnAssetFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAssetToVault",
    data: BytesLike
  ): Result;

  events: {
    "AssetTransfer(tuple,address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetTransfer"): EventFragment;
}

export type AssetTransferEvent = TypedEvent<
  [
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    },
    string,
    string,
    string
  ] & {
    asset: [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
    from: string;
    to: string;
    data: string;
  }
>;

export class IAssetController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAssetControllerInterface;

  functions: {
    assetClass(overrides?: CallOverrides): Promise<[string]>;

    collectionId(
      assetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<[string]>;

    returnAssetFromVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      from: string,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAssetToVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      assetOwner: string,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetClass(overrides?: CallOverrides): Promise<string>;

  collectionId(
    assetId: { class: BytesLike; data: BytesLike },
    overrides?: CallOverrides
  ): Promise<string>;

  returnAssetFromVault(
    asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
    from: string,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAssetToVault(
    asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
    assetOwner: string,
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetClass(overrides?: CallOverrides): Promise<string>;

    collectionId(
      assetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<string>;

    returnAssetFromVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      from: string,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAssetToVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      assetOwner: string,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetTransfer(tuple,address,address,bytes)"(
      asset?: null,
      from?: string | null,
      to?: string | null,
      data?: null
    ): TypedEventFilter<
      [
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        string,
        string,
        string
      ],
      {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        from: string;
        to: string;
        data: string;
      }
    >;

    AssetTransfer(
      asset?: null,
      from?: string | null,
      to?: string | null,
      data?: null
    ): TypedEventFilter<
      [
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        string,
        string,
        string
      ],
      {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        from: string;
        to: string;
        data: string;
      }
    >;
  };

  estimateGas: {
    assetClass(overrides?: CallOverrides): Promise<BigNumber>;

    collectionId(
      assetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnAssetFromVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      from: string,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAssetToVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      assetOwner: string,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetClass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionId(
      assetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnAssetFromVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      from: string,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAssetToVault(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      assetOwner: string,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
