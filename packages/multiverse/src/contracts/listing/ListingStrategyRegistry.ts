/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IListingStrategyRegistry {
  export type StrategyConfigStruct = { controller: string };

  export type StrategyConfigStructOutput = [string] & { controller: string };
}

export interface ListingStrategyRegistryInterface extends utils.Interface {
  functions: {
    "checkRegisteredListingStrategy(bytes4)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isRegisteredListingStrategy(bytes4)": FunctionFragment;
    "listingController(bytes4)": FunctionFragment;
    "listingStrategy(bytes4)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerListingStrategy(bytes4,(address))": FunctionFragment;
    "setListingController(bytes4,address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkRegisteredListingStrategy"
      | "initialize"
      | "isRegisteredListingStrategy"
      | "listingController"
      | "listingStrategy"
      | "proxiableUUID"
      | "registerListingStrategy"
      | "setListingController"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkRegisteredListingStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isRegisteredListingStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingController",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerListingStrategy",
    values: [BytesLike, IListingStrategyRegistry.StrategyConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingController",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkRegisteredListingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredListingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerListingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ListingStrategyControllerChanged(bytes4,address)": EventFragment;
    "ListingStrategyRegistered(bytes4,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ListingStrategyControllerChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingStrategyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ListingStrategyControllerChangedEventObject {
  strategyId: string;
  newController: string;
}
export type ListingStrategyControllerChangedEvent = TypedEvent<
  [string, string],
  ListingStrategyControllerChangedEventObject
>;

export type ListingStrategyControllerChangedEventFilter =
  TypedEventFilter<ListingStrategyControllerChangedEvent>;

export interface ListingStrategyRegisteredEventObject {
  strategyId: string;
  controller: string;
}
export type ListingStrategyRegisteredEvent = TypedEvent<
  [string, string],
  ListingStrategyRegisteredEventObject
>;

export type ListingStrategyRegisteredEventFilter =
  TypedEventFilter<ListingStrategyRegisteredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ListingStrategyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ListingStrategyRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    initialize(
      acl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[IListingStrategyRegistry.StrategyConfigStructOutput]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: IListingStrategyRegistry.StrategyConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkRegisteredListingStrategy(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  initialize(
    acl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegisteredListingStrategy(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listingController(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  listingStrategy(
    strategyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<IListingStrategyRegistry.StrategyConfigStructOutput>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerListingStrategy(
    strategyId: BytesLike,
    config: IListingStrategyRegistry.StrategyConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setListingController(
    strategyId: BytesLike,
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(acl: string, overrides?: CallOverrides): Promise<void>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<IListingStrategyRegistry.StrategyConfigStructOutput>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: IListingStrategyRegistry.StrategyConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ListingStrategyControllerChanged(bytes4,address)"(
      strategyId?: BytesLike | null,
      newController?: string | null
    ): ListingStrategyControllerChangedEventFilter;
    ListingStrategyControllerChanged(
      strategyId?: BytesLike | null,
      newController?: string | null
    ): ListingStrategyControllerChangedEventFilter;

    "ListingStrategyRegistered(bytes4,address)"(
      strategyId?: BytesLike | null,
      controller?: string | null
    ): ListingStrategyRegisteredEventFilter;
    ListingStrategyRegistered(
      strategyId?: BytesLike | null,
      controller?: string | null
    ): ListingStrategyRegisteredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      acl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: IListingStrategyRegistry.StrategyConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      acl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredListingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingController(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingStrategy(
      strategyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerListingStrategy(
      strategyId: BytesLike,
      config: IListingStrategyRegistry.StrategyConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setListingController(
      strategyId: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
