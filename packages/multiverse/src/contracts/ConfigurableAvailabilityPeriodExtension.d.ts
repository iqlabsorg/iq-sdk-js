/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConfigurableAvailabilityPeriodExtensionInterface
  extends ethers.utils.Interface {
  functions: {
    "__assetClass()": FunctionFragment;
    "__availabilityPeriodEnd()": FunctionFragment;
    "__availabilityPeriodRange()": FunctionFragment;
    "__availabilityPeriodStart()": FunctionFragment;
    "__metahub()": FunctionFragment;
    "__original()": FunctionFragment;
    "__setAvailabilityPeriodEnd(uint32)": FunctionFragment;
    "__setAvailabilityPeriodStart(uint32)": FunctionFragment;
    "__supportedInterfaces(bytes4[])": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__assetClass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__availabilityPeriodEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__availabilityPeriodRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__availabilityPeriodStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__metahub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__original",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__setAvailabilityPeriodEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setAvailabilityPeriodStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__supportedInterfaces",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "__assetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__availabilityPeriodEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__availabilityPeriodRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__availabilityPeriodStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__metahub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__original", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__setAvailabilityPeriodEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setAvailabilityPeriodStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__supportedInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export class ConfigurableAvailabilityPeriodExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConfigurableAvailabilityPeriodExtensionInterface;

  functions: {
    __assetClass(overrides?: CallOverrides): Promise<[string]>;

    __availabilityPeriodEnd(overrides?: CallOverrides): Promise<[number]>;

    __availabilityPeriodRange(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        availabilityPeriodStart: number;
        availabilityPeriodEnd: number;
      }
    >;

    __availabilityPeriodStart(overrides?: CallOverrides): Promise<[number]>;

    __metahub(overrides?: CallOverrides): Promise<[string]>;

    __original(overrides?: CallOverrides): Promise<[string]>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  __assetClass(overrides?: CallOverrides): Promise<string>;

  __availabilityPeriodEnd(overrides?: CallOverrides): Promise<number>;

  __availabilityPeriodRange(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & {
      availabilityPeriodStart: number;
      availabilityPeriodEnd: number;
    }
  >;

  __availabilityPeriodStart(overrides?: CallOverrides): Promise<number>;

  __metahub(overrides?: CallOverrides): Promise<string>;

  __original(overrides?: CallOverrides): Promise<string>;

  __setAvailabilityPeriodEnd(
    availabilityPeriodEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setAvailabilityPeriodStart(
    availabilityPeriodStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __supportedInterfaces(
    interfaceIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    __assetClass(overrides?: CallOverrides): Promise<string>;

    __availabilityPeriodEnd(overrides?: CallOverrides): Promise<number>;

    __availabilityPeriodRange(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        availabilityPeriodStart: number;
        availabilityPeriodEnd: number;
      }
    >;

    __availabilityPeriodStart(overrides?: CallOverrides): Promise<number>;

    __metahub(overrides?: CallOverrides): Promise<string>;

    __original(overrides?: CallOverrides): Promise<string>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    __assetClass(overrides?: CallOverrides): Promise<BigNumber>;

    __availabilityPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    __availabilityPeriodRange(overrides?: CallOverrides): Promise<BigNumber>;

    __availabilityPeriodStart(overrides?: CallOverrides): Promise<BigNumber>;

    __metahub(overrides?: CallOverrides): Promise<BigNumber>;

    __original(overrides?: CallOverrides): Promise<BigNumber>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __assetClass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __availabilityPeriodEnd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __availabilityPeriodRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __availabilityPeriodStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __metahub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __original(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
