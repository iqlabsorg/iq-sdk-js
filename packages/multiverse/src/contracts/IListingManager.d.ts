/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IListingManagerInterface extends ethers.utils.Interface {
  functions: {
    "assetListingCount(address)": FunctionFragment;
    "assetListings(address,uint256,uint256)": FunctionFragment;
    "delistAsset(uint256)": FunctionFragment;
    "listAsset(((bytes4,bytes),uint256),(bytes4,bytes),uint32,bool)": FunctionFragment;
    "listingCount()": FunctionFragment;
    "listingInfo(uint256)": FunctionFragment;
    "listings(uint256,uint256)": FunctionFragment;
    "pauseListing(uint256)": FunctionFragment;
    "unpauseListing(uint256)": FunctionFragment;
    "userListingCount(address)": FunctionFragment;
    "userListings(address,uint256,uint256)": FunctionFragment;
    "withdrawAsset(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetListings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listAsset",
    values: [
      { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      { strategy: BytesLike; data: BytesLike },
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsset",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsset",
    data: BytesLike
  ): Result;

  events: {
    "AssetDelisted(uint256,address,uint32)": EventFragment;
    "AssetListed(uint256,address,tuple,tuple,uint32)": EventFragment;
    "AssetWithdrawn(uint256,address,tuple)": EventFragment;
    "ListingPaused(uint256)": EventFragment;
    "ListingUnpaused(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingUnpaused"): EventFragment;
}

export type AssetDelistedEvent = TypedEvent<
  [BigNumber, string, number] & {
    listingId: BigNumber;
    lister: string;
    unlocksAt: number;
  }
>;

export type AssetListedEvent = TypedEvent<
  [
    BigNumber,
    string,
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    },
    [string, string] & { strategy: string; data: string },
    number
  ] & {
    listingId: BigNumber;
    lister: string;
    asset: [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
    params: [string, string] & { strategy: string; data: string };
    maxLockPeriod: number;
  }
>;

export type AssetWithdrawnEvent = TypedEvent<
  [
    BigNumber,
    string,
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    }
  ] & {
    listingId: BigNumber;
    lister: string;
    asset: [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
  }
>;

export type ListingPausedEvent = TypedEvent<
  [BigNumber] & { listingId: BigNumber }
>;

export type ListingUnpausedEvent = TypedEvent<
  [BigNumber] & { listingId: BigNumber }
>;

export class IListingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IListingManagerInterface;

  functions: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listingCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        }
      ]
    >;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetListingCount(
    original: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetListings(
    original: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      })[]
    ]
  >;

  delistAsset(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listAsset(
    asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
    params: { strategy: BytesLike; data: BytesLike },
    maxLockPeriod: BigNumberish,
    immediatePayout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listingCount(overrides?: CallOverrides): Promise<BigNumber>;

  listingInfo(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [[string, string] & { class: string; data: string }, BigNumber] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      },
      [string, string] & { strategy: string; data: string },
      string,
      number,
      number,
      boolean,
      boolean,
      boolean
    ] & {
      asset: [[string, string] & { class: string; data: string }, BigNumber] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      };
      params: [string, string] & { strategy: string; data: string };
      lister: string;
      maxLockPeriod: number;
      lockedTill: number;
      immediatePayout: boolean;
      delisted: boolean;
      paused: boolean;
    }
  >;

  listings(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      })[]
    ]
  >;

  pauseListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userListingCount(
    lister: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userListings(
    lister: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      })[]
    ]
  >;

  withdrawAsset(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    delistAsset(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      }
    >;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    pauseListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetDelisted(uint256,address,uint32)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      unlocksAt?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { listingId: BigNumber; lister: string; unlocksAt: number }
    >;

    AssetDelisted(
      listingId?: BigNumberish | null,
      lister?: string | null,
      unlocksAt?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { listingId: BigNumber; lister: string; unlocksAt: number }
    >;

    "AssetListed(uint256,address,tuple,tuple,uint32)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null,
      params?: null,
      maxLockPeriod?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        number
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        maxLockPeriod: number;
      }
    >;

    AssetListed(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null,
      params?: null,
      maxLockPeriod?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        number
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        maxLockPeriod: number;
      }
    >;

    "AssetWithdrawn(uint256,address,tuple)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        }
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
      }
    >;

    AssetWithdrawn(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        }
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
      }
    >;

    "ListingPaused(uint256)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    ListingPaused(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    "ListingUnpaused(uint256)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    ListingUnpaused(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;
  };

  estimateGas: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
