/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRentingManagerInterface extends ethers.utils.Interface {
  functions: {
    "assetRentalStatus((bytes4,bytes))": FunctionFragment;
    "collectionRentedValue(bytes32,address)": FunctionFragment;
    "estimateRent((uint256,address,address,uint32,address))": FunctionFragment;
    "rent((uint256,address,address,uint32,address),uint256)": FunctionFragment;
    "rentalAgreementInfo(uint256)": FunctionFragment;
    "userRentalAgreements(address,uint256,uint256)": FunctionFragment;
    "userRentalCount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetRentalStatus",
    values: [{ class: BytesLike; data: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionRentedValue",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRent",
    values: [
      {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [
      {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalAgreementInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalAgreements",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalCount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetRentalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionRentedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentalAgreementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalCount",
    data: BytesLike
  ): Result;

  events: {
    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRented"): EventFragment;
}

export type AssetRentedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    },
    number,
    number
  ] & {
    rentalId: BigNumber;
    renter: string;
    listingId: BigNumber;
    warpedAsset: [
      [string, string] & { class: string; data: string },
      BigNumber
    ] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
    startTime: number;
    endTime: number;
  }
>;

export class IRentingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRentingManagerInterface;

  functions: {
    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<[number]>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          total: BigNumber;
          protocolFee: BigNumber;
          listerBaseFee: BigNumber;
          listerPremium: BigNumber;
          universeBaseFee: BigNumber;
          universePremium: BigNumber;
        }
      ]
    >;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          string,
          BigNumber,
          string,
          number,
          number
        ] & {
          warpedAsset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          collectionId: string;
          listingId: BigNumber;
          renter: string;
          startTime: number;
          endTime: number;
        }
      ]
    >;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          string,
          BigNumber,
          string,
          number,
          number
        ] & {
          warpedAsset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          collectionId: string;
          listingId: BigNumber;
          renter: string;
          startTime: number;
          endTime: number;
        })[]
      ]
    >;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  assetRentalStatus(
    warpedAssetId: { class: BytesLike; data: BytesLike },
    overrides?: CallOverrides
  ): Promise<number>;

  collectionRentedValue(
    warpedCollectionId: BytesLike,
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateRent(
    rentingParams: {
      listingId: BigNumberish;
      warper: string;
      renter: string;
      rentalPeriod: BigNumberish;
      paymentToken: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      protocolFee: BigNumber;
      listerBaseFee: BigNumber;
      listerPremium: BigNumber;
      universeBaseFee: BigNumber;
      universePremium: BigNumber;
    }
  >;

  rent(
    rentingParams: {
      listingId: BigNumberish;
      warper: string;
      renter: string;
      rentalPeriod: BigNumberish;
      paymentToken: string;
    },
    maxPaymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentalAgreementInfo(
    rentalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [[string, string] & { class: string; data: string }, BigNumber] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      },
      string,
      BigNumber,
      string,
      number,
      number
    ] & {
      warpedAsset: [
        [string, string] & { class: string; data: string },
        BigNumber
      ] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      };
      collectionId: string;
      listingId: BigNumber;
      renter: string;
      startTime: number;
      endTime: number;
    }
  >;

  userRentalAgreements(
    renter: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        string,
        BigNumber,
        string,
        number,
        number
      ] & {
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        collectionId: string;
        listingId: BigNumber;
        renter: string;
        startTime: number;
        endTime: number;
      })[]
    ]
  >;

  userRentalCount(
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<number>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        protocolFee: BigNumber;
        listerBaseFee: BigNumber;
        listerPremium: BigNumber;
        universeBaseFee: BigNumber;
        universePremium: BigNumber;
      }
    >;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        string,
        BigNumber,
        string,
        number,
        number
      ] & {
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        collectionId: string;
        listingId: BigNumber;
        renter: string;
        startTime: number;
        endTime: number;
      }
    >;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          string,
          BigNumber,
          string,
          number,
          number
        ] & {
          warpedAsset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          collectionId: string;
          listingId: BigNumber;
          renter: string;
          startTime: number;
          endTime: number;
        })[]
      ]
    >;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)"(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        number,
        number
      ],
      {
        rentalId: BigNumber;
        renter: string;
        listingId: BigNumber;
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        startTime: number;
        endTime: number;
      }
    >;

    AssetRented(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        number,
        number
      ],
      {
        rentalId: BigNumber;
        renter: string;
        listingId: BigNumber;
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        startTime: number;
        endTime: number;
      }
    >;
  };

  estimateGas: {
    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
