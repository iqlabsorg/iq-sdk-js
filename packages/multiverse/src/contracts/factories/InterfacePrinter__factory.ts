/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  InterfacePrinter,
  InterfacePrinterInterface,
} from "../InterfacePrinter";

const _abi = [
  {
    inputs: [],
    name: "erc721",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "universeToken",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50609f8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063bca6ce64146037578063eece7a2214605d575b600080fd5b6380ac58cd60e01b5b6040516001600160e01b0319909116815260200160405180910390f35b638a6fa92360e01b604056fea2646970667358221220a5397aef535f5e7cc432bb3378cdfc7d3798bfc27cacfd5c60dc16a8a21d54ff64736f6c634300080d0033";

export class InterfacePrinter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<InterfacePrinter> {
    return super.deploy(overrides || {}) as Promise<InterfacePrinter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): InterfacePrinter {
    return super.attach(address) as InterfacePrinter;
  }
  connect(signer: Signer): InterfacePrinter__factory {
    return super.connect(signer) as InterfacePrinter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InterfacePrinterInterface {
    return new utils.Interface(_abi) as InterfacePrinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InterfacePrinter {
    return new Contract(address, _abi, signerOrProvider) as InterfacePrinter;
  }
}
