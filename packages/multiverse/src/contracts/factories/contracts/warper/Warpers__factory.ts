/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Warpers,
  WarpersInterface,
} from "../../../contracts/warper/Warpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "IncompatibleAsset",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWarperInterface",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "UnsupportedAsset",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provided",
        type: "address",
      },
      {
        internalType: "address",
        name: "required",
        type: "address",
      },
    ],
    name: "WarperHasIncorrectMetahubReference",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "warper",
        type: "address",
      },
    ],
    name: "WarperIsAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "WarperIsNotPaused",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "warper",
        type: "address",
      },
    ],
    name: "WarperIsNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "WarperIsPaused",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200a9c08a0d2b0e948eeb521c1fc90311400f67952b016052afb4581f31930f76764736f6c634300080d0033";

type WarpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WarpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Warpers__factory extends ContractFactory {
  constructor(...args: WarpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Warpers> {
    return super.deploy(overrides || {}) as Promise<Warpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Warpers {
    return super.attach(address) as Warpers;
  }
  override connect(signer: Signer): Warpers__factory {
    return super.connect(signer) as Warpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WarpersInterface {
    return new utils.Interface(_abi) as WarpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Warpers {
    return new Contract(address, _abi, signerOrProvider) as Warpers;
  }
}
