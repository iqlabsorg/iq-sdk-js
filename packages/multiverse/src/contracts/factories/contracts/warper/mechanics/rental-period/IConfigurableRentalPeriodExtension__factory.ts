/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IConfigurableRentalPeriodExtension,
  IConfigurableRentalPeriodExtensionInterface,
} from "../../../../../contracts/warper/mechanics/rental-period/IConfigurableRentalPeriodExtension";

const _abi = [
  {
    inputs: [],
    name: "InvalidMaxRentalPeriod",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMinRentalPeriod",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "requestedRentalPeriod",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "minRentalPeriod",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "maxRentalPeriod",
        type: "uint32",
      },
    ],
    name: "WarperRentalPeriodIsOutOfRange",
    type: "error",
  },
  {
    inputs: [],
    name: "__maxRentalPeriod",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "__minRentalPeriod",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "__rentalPeriodRange",
    outputs: [
      {
        internalType: "uint32",
        name: "minRentalPeriod",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "maxRentalPeriod",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxRentalPeriod",
        type: "uint32",
      },
    ],
    name: "__setMaxRentalPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "minRentalPeriod",
        type: "uint32",
      },
    ],
    name: "__setMinRentalPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IConfigurableRentalPeriodExtension__factory {
  static readonly abi = _abi;
  static createInterface(): IConfigurableRentalPeriodExtensionInterface {
    return new utils.Interface(
      _abi
    ) as IConfigurableRentalPeriodExtensionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IConfigurableRentalPeriodExtension {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IConfigurableRentalPeriodExtension;
  }
}
