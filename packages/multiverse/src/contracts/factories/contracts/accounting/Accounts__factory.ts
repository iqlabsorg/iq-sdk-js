/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Accounts,
  AccountsInterface,
} from "../../../contracts/accounting/Accounts";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InvalidWithdrawalAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "RentalFeeSlippage",
    type: "error",
  },
];

const _bytecode =
  "0x610dcc61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063d38f6dfc14610045578063e7f597c614610067575b600080fd5b81801561005157600080fd5b50610065610060366004610935565b61009d565b005b81801561007357600080fd5b5061008761008236600461097f565b610121565b6040516100949190610a11565b60405180910390f35b816000036100c6576040516305a4a8e760e01b8152600481018390526024015b60405180910390fd5b60006100d285856104d8565b9050808311156100f857604051639266535160e01b8152600481018290526024016100bd565b61010585858584036104f0565b5061011a6001600160a01b0385168385610510565b5050505050565b61016c6040518060c0016040528060608152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160006001600160a01b031681525090565b853584101561018e57604051631d5a07f360e21b815260040160405180910390fd5b604080516001808252818301909252600091816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816101a55790505082528735600090815260048401602052604080822081516080810190925291908082815260058401546001600160a01b031660208201526040908101906102289060608d0135908d0135610b13565b815260200161023d60a08d0160808e01610b39565b6001600160a01b0316815250905080846000015160008151811061026357610263610b56565b60209081029190910101526005820154600160e01b900460ff166102da576102c8816060015182604001518d600401600085602001516001600160a01b03166001600160a01b031681526020019081526020016000206105789092919063ffffffff16565b60408101516102d79084610b13565b92505b6001600160a01b03861663554310246102f960408d0160208e01610b39565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381865afa15801561033d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103659190810190610c5f565b60a0908101516020860152610381908a013560808b0135610b13565b604085015261039660a08b0160808c01610b39565b84606001906001600160a01b031690816001600160a01b0316815250506103e8846060015185604001518d6003016000886020015181526020019081526020016000206105789092919063ffffffff16565b60408401516103f79084610b13565b60208a01356080808701919091529093506104189060a08c01908c01610b39565b6001600160a01b031660a085018190526080850151610438918d91610578565b60808401516104479084610b13565b6005830154909350600160e01b900460ff168015610469575060008160400151115b1561049a5761049a888260200151836040015184606001516001600160a01b031661059c909392919063ffffffff16565b82156104ca576104ca8830858d60800160208101906104b99190610b39565b6001600160a01b031692919061059c565b505050979650505050505050565b6000806104e584846105da565b925050505b92915050565b6000610506846001600160a01b03851684610601565b90505b9392505050565b6040516001600160a01b03831660248201526044810182905261057390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261061e565b505050565b600061058484846104d8565b905061011a836105948484610b13565b8691906104f0565b6040516001600160a01b03808516602483015283166044820152606481018290526105d49085906323b872dd60e01b9060840161053c565b50505050565b60008080806105f2866001600160a01b0387166106f0565b909450925050505b9250929050565b60008281526002840160205260408120829055610506848461072a565b6000610673826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107369092919063ffffffff16565b80519091501561057357808060200190518101906106919190610d2c565b6105735760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100bd565b600081815260028301602052604081205481908061071f576107128585610745565b9250600091506105fa9050565b6001925090506105fa565b60006105098383610764565b606061050684846000856107b3565b6000610509838360008181526001830160205260408120541515610509565b60008181526001830160205260408120546107ab575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ea565b5060006104ea565b6060824710156108145760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100bd565b6001600160a01b0385163b61086b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100bd565b600080866001600160a01b031685876040516108879190610d47565b60006040518083038185875af1925050503d80600081146108c4576040519150601f19603f3d011682016040523d82523d6000602084013e6108c9565b606091505b50915091506108d98282866108e4565b979650505050505050565b606083156108f3575081610509565b8251156109035782518084602001fd5b8160405162461bcd60e51b81526004016100bd9190610d63565b6001600160a01b038116811461093257600080fd5b50565b6000806000806080858703121561094b57600080fd5b84359350602085013561095d8161091d565b92506040850135915060608501356109748161091d565b939692955090935050565b600080600080600080600087890361020081121561099c57600080fd5b8835975060a0601f19820112156109b257600080fd5b60208901965060c060bf19820112156109ca57600080fd5b5060c0880194506101808801356109e08161091d565b93506101a088013592506101c08801356109f98161091d565b809250506101e0880135905092959891949750929550565b6020808252825160c083830152805160e08401819052600092918201908390610100860190825b81811015610a9c578451805160018110610a6057634e487b7160e01b86526021600452602486fd5b8452808701516001600160a01b039081168886015260408083015190860152606091820151169084015293850193608090920191600101610a38565b50508387015160408701526040870151606087015260608701519350610acd60808701856001600160a01b03169052565b608087015160a087015260a08701519350610af360c08701856001600160a01b03169052565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008219821115610b3457634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610b4b57600080fd5b81356105098161091d565b634e487b7160e01b600052603260045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610b8f57610b8f610afd565b60405290565b8051610ba08161091d565b919050565b80518015158114610ba057600080fd5b60005b83811015610bd0578181015183820152602001610bb8565b838111156105d45750506000910152565b600082601f830112610bf257600080fd5b815167ffffffffffffffff80821115610c0d57610c0d610afd565b604051601f8301601f19908116603f01168101908282118183101715610c3557610c35610afd565b81604052838152866020858801011115610c4e57600080fd5b610af3846020830160208901610bb5565b600060208284031215610c7157600080fd5b815167ffffffffffffffff80821115610c8957600080fd5b9083019060c08286031215610c9d57600080fd5b610ca5610b6c565b82516001600160e01b031981168114610cbd57600080fd5b8152610ccb60208401610b95565b6020820152610cdc60408401610ba5565b6040820152610ced60608401610b95565b6060820152608083015182811115610d0457600080fd5b610d1087828601610be1565b60808301525060a083015160a082015280935050505092915050565b600060208284031215610d3e57600080fd5b61050982610ba5565b60008251610d59818460208701610bb5565b9190910192915050565b6020815260008251806020840152610d82816040850160208701610bb5565b601f01601f1916919091016040019291505056fea2646970667358221220cab7258aa991bfe5cc74f179314bc424871e8f8508d55caff7424e419560ec1764736f6c634300080d0033";

type AccountsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Accounts__factory extends ContractFactory {
  constructor(...args: AccountsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Accounts> {
    return super.deploy(overrides || {}) as Promise<Accounts>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Accounts {
    return super.attach(address) as Accounts;
  }
  override connect(signer: Signer): Accounts__factory {
    return super.connect(signer) as Accounts__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountsInterface {
    return new utils.Interface(_abi) as AccountsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Accounts {
    return new Contract(address, _abi, signerOrProvider) as Accounts;
  }
}
