/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Accounts,
  AccountsInterface,
} from "../../../contracts/accounting/Accounts";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InvalidWithdrawalAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "RentalFeeSlippage",
    type: "error",
  },
];

const _bytecode =
  "0x610aaf61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80638e1fb5d914610045578063d38f6dfc1461007b575b600080fd5b81801561005157600080fd5b50610065610060366004610815565b61009d565b60405161007291906108ba565b60405180910390f35b81801561008757600080fd5b5061009b610096366004610955565b610330565b005b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526100f660a088016080890161099b565b6001600160a01b0316604082015261011460a088016080890161099b565b6001600160a01b031660c082015261013260a088016080890161099b565b6001600160a01b0316610100820152853584101561016357604051631d5a07f360e21b815260040160405180910390fd5b86356000908152600483016020526040808220906101899060608a0135908a01356109b6565b60208401526000606084015260058101546001600160a01b0381168452600160e01b900460ff16156101e857825160208401516101e39189916101d260a08e0160808f0161099b565b6001600160a01b03169291906103b4565b610236565b6102246101fb60a08b0160808c0161099b565b60208086015186516001600160a01b0316600090815260048f0190925260409091209190610425565b602083015161023390836109b6565b91505b60058501600061024c60408c0160208d0161099b565b6001600160a01b031681526020810191909152604001600020600301546080808501919091526102849060a08a0135908a01356109b6565b60a0808501919091526102c1906102a0908b0160808c0161099b565b60a08501516080860151600090815260038e01602052604090209190610425565b60a08301516102d090836109b6565b602089013560e085015291506102fc6102ef60a08b0160808c0161099b565b60e08501518c9190610425565b60e083015161030b90836109b6565b91506103238730846101d260a08e0160808f0161099b565b5050979650505050505050565b81600003610359576040516305a4a8e760e01b8152600481018390526024015b60405180910390fd5b60006103658585610449565b90508083111561038b57604051639266535160e01b815260048101829052602401610350565b6103988585858403610461565b506103ad6001600160a01b0385168385610481565b5050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261041f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104b6565b50505050565b60006104318484610449565b90506103ad8361044184846109b6565b869190610461565b6000806104568484610588565b925050505b92915050565b6000610477846001600160a01b038516846105af565b90505b9392505050565b6040516001600160a01b0383166024820152604481018290526104b190849063a9059cbb60e01b906064016103e8565b505050565b600061050b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105cc9092919063ffffffff16565b8051909150156104b1578080602001905181019061052991906109dc565b6104b15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610350565b60008080806105a0866001600160a01b0387166105db565b909450925050505b9250929050565b600082815260028401602052604081208290556104778484610615565b60606104778484600085610621565b600081815260028301602052604081205481908061060a576105fd8585610752565b9250600091506105a89050565b6001925090506105a8565b600061047a8383610771565b6060824710156106825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610350565b6001600160a01b0385163b6106d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610350565b600080866001600160a01b031685876040516106f59190610a2a565b60006040518083038185875af1925050503d8060008114610732576040519150601f19603f3d011682016040523d82523d6000602084013e610737565b606091505b50915091506107478282866107c0565b979650505050505050565b600061047a83836000818152600183016020526040812054151561047a565b60008181526001830160205260408120546107b85750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561045b565b50600061045b565b606083156107cf57508161047a565b8251156107df5782518084602001fd5b8160405162461bcd60e51b81526004016103509190610a46565b80356001600160a01b038116811461081057600080fd5b919050565b600080600080600080600087890361020081121561083257600080fd5b8835975060a0601f198201121561084857600080fd5b60208901965060c060bf198201121561086057600080fd5b5060c08801945061087461018089016107f9565b969995985093966101a0810135956101c082013595506101e0909101359350915050565b600181106108b657634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b03908116825260208084015190830152604080840151909116908201526060808301516101208301916108f890840182610898565b506080830151608083015260a083015160a083015260c083015161092760c08401826001600160a01b03169052565b5060e083015160e08301526101008084015161094d828501826001600160a01b03169052565b505092915050565b6000806000806080858703121561096b57600080fd5b8435935061097b602086016107f9565b925060408501359150610990606086016107f9565b905092959194509250565b6000602082840312156109ad57600080fd5b61047a826107f9565b600082198211156109d757634e487b7160e01b600052601160045260246000fd5b500190565b6000602082840312156109ee57600080fd5b8151801515811461047a57600080fd5b60005b83811015610a19578181015183820152602001610a01565b8381111561041f5750506000910152565b60008251610a3c8184602087016109fe565b9190910192915050565b6020815260008251806020840152610a658160408501602087016109fe565b601f01601f1916919091016040019291505056fea2646970667358221220ba683593bb91b310a4b0ce66a67f3ef3df361d17ad64205126d901e9e259f58264736f6c634300080d0033";

type AccountsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Accounts__factory extends ContractFactory {
  constructor(...args: AccountsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Accounts> {
    return super.deploy(overrides || {}) as Promise<Accounts>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Accounts {
    return super.attach(address) as Accounts;
  }
  override connect(signer: Signer): Accounts__factory {
    return super.connect(signer) as Accounts__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountsInterface {
    return new utils.Interface(_abi) as AccountsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Accounts {
    return new Contract(address, _abi, signerOrProvider) as Accounts;
  }
}
