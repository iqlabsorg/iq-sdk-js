/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IAssetVaultInterface extends utils.Interface {
  functions: {
    "assetClass()": FunctionFragment;
    "isRecovery()": FunctionFragment;
    "metahub()": FunctionFragment;
    "pause()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "switchToRecoveryMode()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetClass"
      | "isRecovery"
      | "metahub"
      | "pause"
      | "supportsInterface"
      | "switchToRecoveryMode"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetClass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "metahub", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchToRecoveryMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "assetClass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRecovery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metahub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "RecoveryModeActivated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecoveryModeActivated"): EventFragment;
}

export interface RecoveryModeActivatedEventObject {
  account: string;
}
export type RecoveryModeActivatedEvent = TypedEvent<
  [string],
  RecoveryModeActivatedEventObject
>;

export type RecoveryModeActivatedEventFilter =
  TypedEventFilter<RecoveryModeActivatedEvent>;

export interface IAssetVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetClass(overrides?: CallOverrides): Promise<[string]>;

    isRecovery(overrides?: CallOverrides): Promise<[boolean]>;

    metahub(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    switchToRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetClass(overrides?: CallOverrides): Promise<string>;

  isRecovery(overrides?: CallOverrides): Promise<boolean>;

  metahub(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  switchToRecoveryMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetClass(overrides?: CallOverrides): Promise<string>;

    isRecovery(overrides?: CallOverrides): Promise<boolean>;

    metahub(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    switchToRecoveryMode(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RecoveryModeActivated(address)"(
      account?: null
    ): RecoveryModeActivatedEventFilter;
    RecoveryModeActivated(account?: null): RecoveryModeActivatedEventFilter;
  };

  estimateGas: {
    assetClass(overrides?: CallOverrides): Promise<BigNumber>;

    isRecovery(overrides?: CallOverrides): Promise<BigNumber>;

    metahub(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    switchToRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetClass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRecovery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metahub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    switchToRecoveryMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
