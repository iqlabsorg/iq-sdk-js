/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IWarperManagerInterface extends ethers.utils.Interface {
  functions: {
    "assetWarperCount(address)": FunctionFragment;
    "assetWarpers(address,uint256,uint256)": FunctionFragment;
    "deregisterWarper(address)": FunctionFragment;
    "isWarperAdmin(address,address)": FunctionFragment;
    "pauseWarper(address)": FunctionFragment;
    "registerWarper(address,(string,uint256,bool))": FunctionFragment;
    "supportedAssetCount()": FunctionFragment;
    "supportedAssets(uint256,uint256)": FunctionFragment;
    "universeWarperCount(uint256)": FunctionFragment;
    "universeWarpers(uint256,uint256,uint256)": FunctionFragment;
    "unpauseWarper(address)": FunctionFragment;
    "warperController(address)": FunctionFragment;
    "warperInfo(address)": FunctionFragment;
    "warperPresetFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetWarperCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWarpers",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWarperAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "pauseWarper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerWarper",
    values: [
      string,
      { name: string; universeId: BigNumberish; paused: boolean }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarperCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarpers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "warperController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "warperInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "warperPresetFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWarperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warperController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warperInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warperPresetFactory",
    data: BytesLike
  ): Result;

  events: {
    "WarperDeregistered(address)": EventFragment;
    "WarperPaused(address)": EventFragment;
    "WarperRegistered(uint256,address,address)": EventFragment;
    "WarperUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WarperDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperUnpaused"): EventFragment;
}

export type WarperDeregisteredEvent = TypedEvent<[string] & { warper: string }>;

export type WarperPausedEvent = TypedEvent<[string] & { warper: string }>;

export type WarperRegisteredEvent = TypedEvent<
  [BigNumber, string, string] & {
    universeId: BigNumber;
    warper: string;
    original: string;
  }
>;

export type WarperUnpausedEvent = TypedEvent<[string] & { warper: string }>;

export class IWarperManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWarperManagerInterface;

  functions: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        }
      ]
    >;

    warperPresetFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  assetWarperCount(
    original: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetWarpers(
    original: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      ([string, string, string, BigNumber, boolean] & {
        original: string;
        controller: string;
        name: string;
        universeId: BigNumber;
        paused: boolean;
      })[]
    ]
  >;

  deregisterWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWarperAdmin(
    warper: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerWarper(
    warper: string,
    params: { name: string; universeId: BigNumberish; paused: boolean },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  supportedAssets(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  universeWarperCount(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeWarpers(
    universeId: BigNumberish,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      ([string, string, string, BigNumber, boolean] & {
        original: string;
        controller: string;
        name: string;
        universeId: BigNumber;
        paused: boolean;
      })[]
    ]
  >;

  unpauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  warperController(warper: string, overrides?: CallOverrides): Promise<string>;

  warperInfo(
    warper: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean] & {
      original: string;
      controller: string;
      name: string;
      universeId: BigNumber;
      paused: boolean;
    }
  >;

  warperPresetFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    deregisterWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    unpauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<string>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean] & {
        original: string;
        controller: string;
        name: string;
        universeId: BigNumber;
        paused: boolean;
      }
    >;

    warperPresetFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "WarperDeregistered(address)"(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    WarperDeregistered(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    "WarperPaused(address)"(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    WarperPaused(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    "WarperRegistered(uint256,address,address)"(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { universeId: BigNumber; warper: string; original: string }
    >;

    WarperRegistered(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { universeId: BigNumber; warper: string; original: string }
    >;

    "WarperUnpaused(address)"(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    WarperUnpaused(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;
  };

  estimateGas: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperInfo(warper: string, overrides?: CallOverrides): Promise<BigNumber>;

    warperPresetFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperPresetFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
