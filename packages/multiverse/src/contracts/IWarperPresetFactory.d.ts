/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IWarperPresetFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addPreset(bytes32,address)": FunctionFragment;
    "deployPreset(bytes32,bytes)": FunctionFragment;
    "disablePreset(bytes32)": FunctionFragment;
    "enablePreset(bytes32)": FunctionFragment;
    "preset(bytes32)": FunctionFragment;
    "presetEnabled(bytes32)": FunctionFragment;
    "presets()": FunctionFragment;
    "removePreset(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPreset",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPreset",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disablePreset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePreset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "preset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "presetEnabled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "presets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePreset",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addPreset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployPreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disablePreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presetEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "presets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePreset",
    data: BytesLike
  ): Result;

  events: {
    "WarperPresetAdded(bytes32,address)": EventFragment;
    "WarperPresetDeployed(bytes32,address)": EventFragment;
    "WarperPresetDisabled(bytes32)": EventFragment;
    "WarperPresetEnabled(bytes32)": EventFragment;
    "WarperPresetRemoved(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WarperPresetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetRemoved"): EventFragment;
}

export type WarperPresetAddedEvent = TypedEvent<
  [string, string] & { presetId: string; implementation: string }
>;

export type WarperPresetDeployedEvent = TypedEvent<
  [string, string] & { presetId: string; warper: string }
>;

export type WarperPresetDisabledEvent = TypedEvent<
  [string] & { presetId: string }
>;

export type WarperPresetEnabledEvent = TypedEvent<
  [string] & { presetId: string }
>;

export type WarperPresetRemovedEvent = TypedEvent<
  [string] & { presetId: string }
>;

export class IWarperPresetFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWarperPresetFactoryInterface;

  functions: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, boolean] & {
          id: string;
          implementation: string;
          enabled: boolean;
        }
      ]
    >;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    presets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, boolean] & {
          id: string;
          implementation: string;
          enabled: boolean;
        })[]
      ]
    >;

    removePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPreset(
    presetId: BytesLike,
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPreset(
    presetId: BytesLike,
    initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disablePreset(
    presetId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enablePreset(
    presetId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preset(
    presetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      id: string;
      implementation: string;
      enabled: boolean;
    }
  >;

  presetEnabled(
    presetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  presets(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, boolean] & {
      id: string;
      implementation: string;
      enabled: boolean;
    })[]
  >;

  removePreset(
    presetId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    disablePreset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enablePreset(presetId: BytesLike, overrides?: CallOverrides): Promise<void>;

    preset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        id: string;
        implementation: string;
        enabled: boolean;
      }
    >;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    presets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, boolean] & {
        id: string;
        implementation: string;
        enabled: boolean;
      })[]
    >;

    removePreset(presetId: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "WarperPresetAdded(bytes32,address)"(
      presetId?: BytesLike | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string],
      { presetId: string; implementation: string }
    >;

    WarperPresetAdded(
      presetId?: BytesLike | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string],
      { presetId: string; implementation: string }
    >;

    "WarperPresetDeployed(bytes32,address)"(
      presetId?: BytesLike | null,
      warper?: string | null
    ): TypedEventFilter<[string, string], { presetId: string; warper: string }>;

    WarperPresetDeployed(
      presetId?: BytesLike | null,
      warper?: string | null
    ): TypedEventFilter<[string, string], { presetId: string; warper: string }>;

    "WarperPresetDisabled(bytes32)"(
      presetId?: BytesLike | null
    ): TypedEventFilter<[string], { presetId: string }>;

    WarperPresetDisabled(
      presetId?: BytesLike | null
    ): TypedEventFilter<[string], { presetId: string }>;

    "WarperPresetEnabled(bytes32)"(
      presetId?: BytesLike | null
    ): TypedEventFilter<[string], { presetId: string }>;

    WarperPresetEnabled(
      presetId?: BytesLike | null
    ): TypedEventFilter<[string], { presetId: string }>;

    "WarperPresetRemoved(bytes32)"(
      presetId?: BytesLike | null
    ): TypedEventFilter<[string], { presetId: string }>;

    WarperPresetRemoved(
      presetId?: BytesLike | null
    ): TypedEventFilter<[string], { presetId: string }>;
  };

  estimateGas: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preset(presetId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presets(overrides?: CallOverrides): Promise<BigNumber>;

    removePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
