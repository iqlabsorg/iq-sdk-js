/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Assets {
  export type AssetIdStruct = { class: BytesLike; data: BytesLike };

  export type AssetIdStructOutput = [string, string] & {
    class: string;
    data: string;
  };

  export type AssetStruct = { id: Assets.AssetIdStruct; value: BigNumberish };

  export type AssetStructOutput = [Assets.AssetIdStructOutput, BigNumber] & {
    id: Assets.AssetIdStructOutput;
    value: BigNumber;
  };
}

export declare namespace Rentings {
  export type ParamsStruct = {
    listingId: BigNumberish;
    warper: string;
    renter: string;
    rentalPeriod: BigNumberish;
    paymentToken: string;
  };

  export type ParamsStructOutput = [
    BigNumber,
    string,
    string,
    number,
    string
  ] & {
    listingId: BigNumber;
    warper: string;
    renter: string;
    rentalPeriod: number;
    paymentToken: string;
  };

  export type RentalFeesStruct = {
    total: BigNumberish;
    protocolFee: BigNumberish;
    listerBaseFee: BigNumberish;
    listerPremium: BigNumberish;
    universeBaseFee: BigNumberish;
    universePremium: BigNumberish;
  };

  export type RentalFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    total: BigNumber;
    protocolFee: BigNumber;
    listerBaseFee: BigNumber;
    listerPremium: BigNumber;
    universeBaseFee: BigNumber;
    universePremium: BigNumber;
  };

  export type AgreementStruct = {
    warpedAsset: Assets.AssetStruct;
    collectionId: BytesLike;
    listingId: BigNumberish;
    renter: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
  };

  export type AgreementStructOutput = [
    Assets.AssetStructOutput,
    string,
    BigNumber,
    string,
    number,
    number
  ] & {
    warpedAsset: Assets.AssetStructOutput;
    collectionId: string;
    listingId: BigNumber;
    renter: string;
    startTime: number;
    endTime: number;
  };
}

export interface IRentingManagerInterface extends utils.Interface {
  functions: {
    "assetRentalStatus((bytes4,bytes))": FunctionFragment;
    "collectionRentedValue(bytes32,address)": FunctionFragment;
    "estimateRent((uint256,address,address,uint32,address))": FunctionFragment;
    "rent((uint256,address,address,uint32,address),uint256)": FunctionFragment;
    "rentalAgreementInfo(uint256)": FunctionFragment;
    "userRentalAgreements(address,uint256,uint256)": FunctionFragment;
    "userRentalCount(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetRentalStatus"
      | "collectionRentedValue"
      | "estimateRent"
      | "rent"
      | "rentalAgreementInfo"
      | "userRentalAgreements"
      | "userRentalCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetRentalStatus",
    values: [Assets.AssetIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionRentedValue",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRent",
    values: [Rentings.ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [Rentings.ParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalAgreementInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalAgreements",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalCount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetRentalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionRentedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentalAgreementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalCount",
    data: BytesLike
  ): Result;

  events: {
    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRented"): EventFragment;
}

export interface AssetRentedEventObject {
  rentalId: BigNumber;
  renter: string;
  listingId: BigNumber;
  warpedAsset: Assets.AssetStructOutput;
  startTime: number;
  endTime: number;
}
export type AssetRentedEvent = TypedEvent<
  [BigNumber, string, BigNumber, Assets.AssetStructOutput, number, number],
  AssetRentedEventObject
>;

export type AssetRentedEventFilter = TypedEventFilter<AssetRentedEvent>;

export interface IRentingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRentingManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<[Rentings.RentalFeesStructOutput]>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Rentings.AgreementStructOutput]>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Rentings.AgreementStructOutput[]]>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  assetRentalStatus(
    warpedAssetId: Assets.AssetIdStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  collectionRentedValue(
    warpedCollectionId: BytesLike,
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateRent(
    rentingParams: Rentings.ParamsStruct,
    overrides?: CallOverrides
  ): Promise<Rentings.RentalFeesStructOutput>;

  rent(
    rentingParams: Rentings.ParamsStruct,
    maxPaymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentalAgreementInfo(
    rentalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Rentings.AgreementStructOutput>;

  userRentalAgreements(
    renter: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], Rentings.AgreementStructOutput[]]>;

  userRentalCount(
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<Rentings.RentalFeesStructOutput>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Rentings.AgreementStructOutput>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Rentings.AgreementStructOutput[]]>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)"(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): AssetRentedEventFilter;
    AssetRented(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): AssetRentedEventFilter;
  };

  estimateGas: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
