/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace Assets {
  export type AssetIdStruct = { class: BytesLike; data: BytesLike };

  export type AssetIdStructOutput = [string, string] & {
    class: string;
    data: string;
  };

  export type AssetStruct = { id: Assets.AssetIdStruct; value: BigNumberish };

  export type AssetStructOutput = [Assets.AssetIdStructOutput, BigNumber] & {
    id: Assets.AssetIdStructOutput;
    value: BigNumber;
  };
}

export declare namespace Listings {
  export type ParamsStruct = { strategy: BytesLike; data: BytesLike };

  export type ParamsStructOutput = [string, string] & {
    strategy: string;
    data: string;
  };
}

export declare namespace Rentings {
  export type AgreementStruct = {
    warpedAsset: Assets.AssetStruct;
    collectionId: BytesLike;
    listingId: BigNumberish;
    renter: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    listingParams: Listings.ParamsStruct;
  };

  export type AgreementStructOutput = [
    Assets.AssetStructOutput,
    string,
    BigNumber,
    string,
    number,
    number,
    Listings.ParamsStructOutput
  ] & {
    warpedAsset: Assets.AssetStructOutput;
    collectionId: string;
    listingId: BigNumber;
    renter: string;
    startTime: number;
    endTime: number;
    listingParams: Listings.ParamsStructOutput;
  };
}

export declare namespace Accounts {
  export type UserEarningStruct = {
    earningType: BigNumberish;
    account: string;
    value: BigNumberish;
    token: string;
  };

  export type UserEarningStructOutput = [number, string, BigNumber, string] & {
    earningType: number;
    account: string;
    value: BigNumber;
    token: string;
  };

  export type RentalEarningsStruct = {
    userEarnings: Accounts.UserEarningStruct[];
    universeId: BigNumberish;
    universeEarningValue: BigNumberish;
    universeEarningToken: string;
    protocolEarningValue: BigNumberish;
    protocolEarningToken: string;
  };

  export type RentalEarningsStructOutput = [
    Accounts.UserEarningStructOutput[],
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    userEarnings: Accounts.UserEarningStructOutput[];
    universeId: BigNumber;
    universeEarningValue: BigNumber;
    universeEarningToken: string;
    protocolEarningValue: BigNumber;
    protocolEarningToken: string;
  };
}

export interface WarperWithRentingInterface extends utils.Interface {
  functions: {
    "__assetClass()": FunctionFragment;
    "__initialize(address,address)": FunctionFragment;
    "__metahub()": FunctionFragment;
    "__onRent(uint256,uint256,uint256,(((bytes4,bytes),uint256),bytes32,uint256,address,uint32,uint32,(bytes4,bytes)),((uint8,address,uint256,address)[],uint256,uint256,address,uint256,address))": FunctionFragment;
    "__original()": FunctionFragment;
    "__supportedInterfaces(bytes4[])": FunctionFragment;
    "amount()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(address,uint256,bytes)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "rentalAgreement()": FunctionFragment;
    "rentalEarnings()": FunctionFragment;
    "rentalId()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setSuccessState(bool)": FunctionFragment;
    "successState()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenId()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__assetClass"
      | "__initialize"
      | "__metahub"
      | "__onRent"
      | "__original"
      | "__supportedInterfaces"
      | "amount"
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "isApprovedForAll"
      | "mint"
      | "multicall"
      | "ownerOf"
      | "rentalAgreement"
      | "rentalEarnings"
      | "rentalId"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setSuccessState"
      | "successState"
      | "supportsInterface"
      | "tokenId"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__assetClass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "__metahub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__onRent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Rentings.AgreementStruct,
      Accounts.RentalEarningsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__original",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__supportedInterfaces",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalAgreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentalEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rentalId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuccessState",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "successState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__assetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__metahub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__onRent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__original", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__supportedInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentalAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentalEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentalId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuccessState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WarperWithRenting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WarperWithRentingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __assetClass(overrides?: CallOverrides): Promise<[string]>;

    __initialize(
      original: string,
      metahub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __metahub(overrides?: CallOverrides): Promise<[string]>;

    __onRent(
      rentalId_: BigNumberish,
      tokenId_: BigNumberish,
      amount_: BigNumberish,
      rentalAgreement_: Rentings.AgreementStruct,
      rentalEarnings_: Accounts.RentalEarningsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __original(overrides?: CallOverrides): Promise<[string]>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      arg0: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rentalAgreement(
      overrides?: CallOverrides
    ): Promise<
      [
        Assets.AssetStructOutput,
        string,
        BigNumber,
        string,
        number,
        number,
        Listings.ParamsStructOutput
      ] & {
        warpedAsset: Assets.AssetStructOutput;
        collectionId: string;
        listingId: BigNumber;
        renter: string;
        startTime: number;
        endTime: number;
        listingParams: Listings.ParamsStructOutput;
      }
    >;

    rentalEarnings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, string] & {
        universeId: BigNumber;
        universeEarningValue: BigNumber;
        universeEarningToken: string;
        protocolEarningValue: BigNumber;
        protocolEarningToken: string;
      }
    >;

    rentalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSuccessState(
      successState_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    successState(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __assetClass(overrides?: CallOverrides): Promise<string>;

  __initialize(
    original: string,
    metahub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __metahub(overrides?: CallOverrides): Promise<string>;

  __onRent(
    rentalId_: BigNumberish,
    tokenId_: BigNumberish,
    amount_: BigNumberish,
    rentalAgreement_: Rentings.AgreementStruct,
    rentalEarnings_: Accounts.RentalEarningsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __original(overrides?: CallOverrides): Promise<string>;

  __supportedInterfaces(
    interfaceIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    arg0: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rentalAgreement(
    overrides?: CallOverrides
  ): Promise<
    [
      Assets.AssetStructOutput,
      string,
      BigNumber,
      string,
      number,
      number,
      Listings.ParamsStructOutput
    ] & {
      warpedAsset: Assets.AssetStructOutput;
      collectionId: string;
      listingId: BigNumber;
      renter: string;
      startTime: number;
      endTime: number;
      listingParams: Listings.ParamsStructOutput;
    }
  >;

  rentalEarnings(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, string] & {
      universeId: BigNumber;
      universeEarningValue: BigNumber;
      universeEarningToken: string;
      protocolEarningValue: BigNumber;
      protocolEarningToken: string;
    }
  >;

  rentalId(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    arg0: string,
    arg1: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSuccessState(
    successState_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  successState(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __assetClass(overrides?: CallOverrides): Promise<string>;

    __initialize(
      original: string,
      metahub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __metahub(overrides?: CallOverrides): Promise<string>;

    __onRent(
      rentalId_: BigNumberish,
      tokenId_: BigNumberish,
      amount_: BigNumberish,
      rentalAgreement_: Rentings.AgreementStruct,
      rentalEarnings_: Accounts.RentalEarningsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; errorMessage: string }>;

    __original(overrides?: CallOverrides): Promise<string>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      arg0: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rentalAgreement(
      overrides?: CallOverrides
    ): Promise<
      [
        Assets.AssetStructOutput,
        string,
        BigNumber,
        string,
        number,
        number,
        Listings.ParamsStructOutput
      ] & {
        warpedAsset: Assets.AssetStructOutput;
        collectionId: string;
        listingId: BigNumber;
        renter: string;
        startTime: number;
        endTime: number;
        listingParams: Listings.ParamsStructOutput;
      }
    >;

    rentalEarnings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, string] & {
        universeId: BigNumber;
        universeEarningValue: BigNumber;
        universeEarningToken: string;
        protocolEarningValue: BigNumber;
        protocolEarningToken: string;
      }
    >;

    rentalId(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSuccessState(
      successState_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    successState(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    __assetClass(overrides?: CallOverrides): Promise<BigNumber>;

    __initialize(
      original: string,
      metahub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __metahub(overrides?: CallOverrides): Promise<BigNumber>;

    __onRent(
      rentalId_: BigNumberish,
      tokenId_: BigNumberish,
      amount_: BigNumberish,
      rentalAgreement_: Rentings.AgreementStruct,
      rentalEarnings_: Accounts.RentalEarningsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __original(overrides?: CallOverrides): Promise<BigNumber>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentalAgreement(overrides?: CallOverrides): Promise<BigNumber>;

    rentalEarnings(overrides?: CallOverrides): Promise<BigNumber>;

    rentalId(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSuccessState(
      successState_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    successState(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __assetClass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __initialize(
      original: string,
      metahub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __metahub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __onRent(
      rentalId_: BigNumberish,
      tokenId_: BigNumberish,
      amount_: BigNumberish,
      rentalAgreement_: Rentings.AgreementStruct,
      rentalEarnings_: Accounts.RentalEarningsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __original(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentalAgreement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rentalEarnings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rentalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSuccessState(
      successState_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    successState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
