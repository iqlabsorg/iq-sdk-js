/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Assets {
  export type AssetConfigStruct = {
    controller: string;
    assetClass: BytesLike;
    vault: string;
  };

  export type AssetConfigStructOutput = [string, string, string] & {
    controller: string;
    assetClass: string;
    vault: string;
  };
}

export interface IAssetManagerInterface extends utils.Interface {
  functions: {
    "assetClassController(bytes4)": FunctionFragment;
    "isWarperAdmin(address,address)": FunctionFragment;
    "registerAsset(bytes4,address)": FunctionFragment;
    "supportedAssetCount()": FunctionFragment;
    "supportedAssets(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetClassController"
      | "isWarperAdmin"
      | "registerAsset"
      | "supportedAssetCount"
      | "supportedAssets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetClassController",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWarperAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssets",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetClassController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWarperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssets",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAssetManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetClassController(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerAsset(
      assetClass: BytesLike,
      original: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Assets.AssetConfigStructOutput[]]>;
  };

  assetClassController(
    assetClass: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isWarperAdmin(
    warper: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerAsset(
    assetClass: BytesLike,
    original: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  supportedAssets(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], Assets.AssetConfigStructOutput[]]>;

  callStatic: {
    assetClassController(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAsset(
      assetClass: BytesLike,
      original: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Assets.AssetConfigStructOutput[]]>;
  };

  filters: {};

  estimateGas: {
    assetClassController(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAsset(
      assetClass: BytesLike,
      original: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetClassController(
      assetClass: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAsset(
      assetClass: BytesLike,
      original: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
