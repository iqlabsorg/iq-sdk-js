/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace Listings {
  export type ParamsStruct = { strategy: BytesLike; data: BytesLike };

  export type ParamsStructOutput = [string, string] & {
    strategy: string;
    data: string;
  };
}

export declare namespace Rentings {
  export type ParamsStruct = {
    listingId: BigNumberish;
    warper: string;
    renter: string;
    rentalPeriod: BigNumberish;
    paymentToken: string;
  };

  export type ParamsStructOutput = [
    BigNumber,
    string,
    string,
    number,
    string
  ] & {
    listingId: BigNumber;
    warper: string;
    renter: string;
    rentalPeriod: number;
    paymentToken: string;
  };
}

export interface FixedPriceListingControllerInterface extends utils.Interface {
  functions: {
    "calculateRentalFee((bytes4,bytes),(uint256,address,address,uint32,address))": FunctionFragment;
    "strategyId()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateRentalFee"
      | "strategyId"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateRentalFee",
    values: [Listings.ParamsStruct, Rentings.ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateRentalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategyId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FixedPriceListingController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedPriceListingControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateRentalFee(
      strategyParams: Listings.ParamsStruct,
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    strategyId(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  calculateRentalFee(
    strategyParams: Listings.ParamsStruct,
    rentingParams: Rentings.ParamsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strategyId(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculateRentalFee(
      strategyParams: Listings.ParamsStruct,
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyId(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    calculateRentalFee(
      strategyParams: Listings.ParamsStruct,
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyId(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateRentalFee(
      strategyParams: Listings.ParamsStruct,
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
