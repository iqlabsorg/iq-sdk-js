/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface ConfigurableRentalPeriodExtensionInterface
  extends utils.Interface {
  functions: {
    "__assetClass()": FunctionFragment;
    "__maxRentalPeriod()": FunctionFragment;
    "__metahub()": FunctionFragment;
    "__minRentalPeriod()": FunctionFragment;
    "__original()": FunctionFragment;
    "__rentalPeriodRange()": FunctionFragment;
    "__setMaxRentalPeriod(uint32)": FunctionFragment;
    "__setMinRentalPeriod(uint32)": FunctionFragment;
    "__supportedInterfaces(bytes4[])": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__assetClass"
      | "__maxRentalPeriod"
      | "__metahub"
      | "__minRentalPeriod"
      | "__original"
      | "__rentalPeriodRange"
      | "__setMaxRentalPeriod"
      | "__setMinRentalPeriod"
      | "__supportedInterfaces"
      | "multicall"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__assetClass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__maxRentalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__metahub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__minRentalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__original",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__rentalPeriodRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__setMaxRentalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setMinRentalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__supportedInterfaces",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "__assetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__maxRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__metahub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__minRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__original", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__rentalPeriodRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setMaxRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setMinRentalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__supportedInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ConfigurableRentalPeriodExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigurableRentalPeriodExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __assetClass(overrides?: CallOverrides): Promise<[string]>;

    __maxRentalPeriod(overrides?: CallOverrides): Promise<[number]>;

    __metahub(overrides?: CallOverrides): Promise<[string]>;

    __minRentalPeriod(overrides?: CallOverrides): Promise<[number]>;

    __original(overrides?: CallOverrides): Promise<[string]>;

    __rentalPeriodRange(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { minRentalPeriod: number; maxRentalPeriod: number }
    >;

    __setMaxRentalPeriod(
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setMinRentalPeriod(
      minRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  __assetClass(overrides?: CallOverrides): Promise<string>;

  __maxRentalPeriod(overrides?: CallOverrides): Promise<number>;

  __metahub(overrides?: CallOverrides): Promise<string>;

  __minRentalPeriod(overrides?: CallOverrides): Promise<number>;

  __original(overrides?: CallOverrides): Promise<string>;

  __rentalPeriodRange(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { minRentalPeriod: number; maxRentalPeriod: number }
  >;

  __setMaxRentalPeriod(
    maxRentalPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setMinRentalPeriod(
    minRentalPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __supportedInterfaces(
    interfaceIds: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    __assetClass(overrides?: CallOverrides): Promise<string>;

    __maxRentalPeriod(overrides?: CallOverrides): Promise<number>;

    __metahub(overrides?: CallOverrides): Promise<string>;

    __minRentalPeriod(overrides?: CallOverrides): Promise<number>;

    __original(overrides?: CallOverrides): Promise<string>;

    __rentalPeriodRange(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { minRentalPeriod: number; maxRentalPeriod: number }
    >;

    __setMaxRentalPeriod(
      maxRentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setMinRentalPeriod(
      minRentalPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    __assetClass(overrides?: CallOverrides): Promise<BigNumber>;

    __maxRentalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    __metahub(overrides?: CallOverrides): Promise<BigNumber>;

    __minRentalPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    __original(overrides?: CallOverrides): Promise<BigNumber>;

    __rentalPeriodRange(overrides?: CallOverrides): Promise<BigNumber>;

    __setMaxRentalPeriod(
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setMinRentalPeriod(
      minRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __assetClass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __maxRentalPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __metahub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __minRentalPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __original(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __rentalPeriodRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __setMaxRentalPeriod(
      maxRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setMinRentalPeriod(
      minRentalPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __supportedInterfaces(
      interfaceIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
