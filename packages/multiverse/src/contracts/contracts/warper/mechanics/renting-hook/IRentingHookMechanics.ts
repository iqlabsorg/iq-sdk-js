/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace Assets {
  export type AssetIdStruct = { class: BytesLike; data: BytesLike };

  export type AssetIdStructOutput = [string, string] & {
    class: string;
    data: string;
  };

  export type AssetStruct = { id: Assets.AssetIdStruct; value: BigNumberish };

  export type AssetStructOutput = [Assets.AssetIdStructOutput, BigNumber] & {
    id: Assets.AssetIdStructOutput;
    value: BigNumber;
  };
}

export declare namespace Listings {
  export type ParamsStruct = { strategy: BytesLike; data: BytesLike };

  export type ParamsStructOutput = [string, string] & {
    strategy: string;
    data: string;
  };
}

export declare namespace Rentings {
  export type AgreementStruct = {
    warpedAsset: Assets.AssetStruct;
    collectionId: BytesLike;
    listingId: BigNumberish;
    renter: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    listingParams: Listings.ParamsStruct;
  };

  export type AgreementStructOutput = [
    Assets.AssetStructOutput,
    string,
    BigNumber,
    string,
    number,
    number,
    Listings.ParamsStructOutput
  ] & {
    warpedAsset: Assets.AssetStructOutput;
    collectionId: string;
    listingId: BigNumber;
    renter: string;
    startTime: number;
    endTime: number;
    listingParams: Listings.ParamsStructOutput;
  };
}

export declare namespace Accounts {
  export type UserEarningStruct = {
    earningType: BigNumberish;
    account: string;
    value: BigNumberish;
    token: string;
  };

  export type UserEarningStructOutput = [number, string, BigNumber, string] & {
    earningType: number;
    account: string;
    value: BigNumber;
    token: string;
  };

  export type RentalEarningsStruct = {
    userEarnings: Accounts.UserEarningStruct[];
    universeId: BigNumberish;
    universeEarningValue: BigNumberish;
    universeEarningToken: string;
    protocolEarningValue: BigNumberish;
    protocolEarningToken: string;
  };

  export type RentalEarningsStructOutput = [
    Accounts.UserEarningStructOutput[],
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    userEarnings: Accounts.UserEarningStructOutput[];
    universeId: BigNumber;
    universeEarningValue: BigNumber;
    universeEarningToken: string;
    protocolEarningValue: BigNumber;
    protocolEarningToken: string;
  };
}

export interface IRentingHookMechanicsInterface extends utils.Interface {
  functions: {
    "__onRent(uint256,uint256,uint256,(((bytes4,bytes),uint256),bytes32,uint256,address,uint32,uint32,(bytes4,bytes)),((uint8,address,uint256,address)[],uint256,uint256,address,uint256,address))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "__onRent"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__onRent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Rentings.AgreementStruct,
      Accounts.RentalEarningsStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "__onRent", data: BytesLike): Result;

  events: {};
}

export interface IRentingHookMechanics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRentingHookMechanicsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __onRent(
      rentalId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      rentalAgreement: Rentings.AgreementStruct,
      rentalEarnings: Accounts.RentalEarningsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __onRent(
    rentalId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    rentalAgreement: Rentings.AgreementStruct,
    rentalEarnings: Accounts.RentalEarningsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __onRent(
      rentalId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      rentalAgreement: Rentings.AgreementStruct,
      rentalEarnings: Accounts.RentalEarningsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; errorMessage: string }>;
  };

  filters: {};

  estimateGas: {
    __onRent(
      rentalId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      rentalAgreement: Rentings.AgreementStruct,
      rentalEarnings: Accounts.RentalEarningsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __onRent(
      rentalId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      rentalAgreement: Rentings.AgreementStruct,
      rentalEarnings: Accounts.RentalEarningsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
