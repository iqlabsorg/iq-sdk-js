/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Warpers {
  export type WarperStruct = {
    assetClass: BytesLike;
    original: string;
    paused: boolean;
    controller: string;
    name: string;
    universeId: BigNumberish;
  };

  export type WarperStructOutput = [
    string,
    string,
    boolean,
    string,
    string,
    BigNumber
  ] & {
    assetClass: string;
    original: string;
    paused: boolean;
    controller: string;
    name: string;
    universeId: BigNumber;
  };
}

export declare namespace IWarperManager {
  export type WarperRegistrationParamsStruct = {
    name: string;
    universeId: BigNumberish;
    paused: boolean;
  };

  export type WarperRegistrationParamsStructOutput = [
    string,
    BigNumber,
    boolean
  ] & { name: string; universeId: BigNumber; paused: boolean };
}

export interface IWarperManagerInterface extends utils.Interface {
  functions: {
    "assetWarperCount(address)": FunctionFragment;
    "assetWarpers(address,uint256,uint256)": FunctionFragment;
    "checkRegisteredWarper(address)": FunctionFragment;
    "checkSupportedAsset(address)": FunctionFragment;
    "deregisterWarper(address)": FunctionFragment;
    "isWarperAdmin(address,address)": FunctionFragment;
    "metahub()": FunctionFragment;
    "pauseWarper(address)": FunctionFragment;
    "registerWarper(address,(string,uint256,bool))": FunctionFragment;
    "setWarperController(address[],address)": FunctionFragment;
    "universeWarperCount(uint256)": FunctionFragment;
    "universeWarpers(uint256,uint256,uint256)": FunctionFragment;
    "unpauseWarper(address)": FunctionFragment;
    "warperController(address)": FunctionFragment;
    "warperInfo(address)": FunctionFragment;
    "warperPresetFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetWarperCount"
      | "assetWarpers"
      | "checkRegisteredWarper"
      | "checkSupportedAsset"
      | "deregisterWarper"
      | "isWarperAdmin"
      | "metahub"
      | "pauseWarper"
      | "registerWarper"
      | "setWarperController"
      | "universeWarperCount"
      | "universeWarpers"
      | "unpauseWarper"
      | "warperController"
      | "warperInfo"
      | "warperPresetFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetWarperCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWarpers",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRegisteredWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSupportedAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWarperAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "metahub", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauseWarper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerWarper",
    values: [string, IWarperManager.WarperRegistrationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWarperController",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarperCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarpers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "warperController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "warperInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "warperPresetFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRegisteredWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWarperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metahub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWarperController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warperController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warperInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warperPresetFactory",
    data: BytesLike
  ): Result;

  events: {
    "WarperDeregistered(address)": EventFragment;
    "WarperPaused(address)": EventFragment;
    "WarperRegistered(uint256,address,address,bytes4)": EventFragment;
    "WarperUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WarperDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperUnpaused"): EventFragment;
}

export interface WarperDeregisteredEventObject {
  warper: string;
}
export type WarperDeregisteredEvent = TypedEvent<
  [string],
  WarperDeregisteredEventObject
>;

export type WarperDeregisteredEventFilter =
  TypedEventFilter<WarperDeregisteredEvent>;

export interface WarperPausedEventObject {
  warper: string;
}
export type WarperPausedEvent = TypedEvent<[string], WarperPausedEventObject>;

export type WarperPausedEventFilter = TypedEventFilter<WarperPausedEvent>;

export interface WarperRegisteredEventObject {
  universeId: BigNumber;
  warper: string;
  original: string;
  assetClass: string;
}
export type WarperRegisteredEvent = TypedEvent<
  [BigNumber, string, string, string],
  WarperRegisteredEventObject
>;

export type WarperRegisteredEventFilter =
  TypedEventFilter<WarperRegisteredEvent>;

export interface WarperUnpausedEventObject {
  warper: string;
}
export type WarperUnpausedEvent = TypedEvent<
  [string],
  WarperUnpausedEventObject
>;

export type WarperUnpausedEventFilter = TypedEventFilter<WarperUnpausedEvent>;

export interface IWarperManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWarperManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    checkRegisteredWarper(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkSupportedAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metahub(overrides?: CallOverrides): Promise<[string]>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWarperController(
      warpers: string[],
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[Warpers.WarperStructOutput]>;

    warperPresetFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  assetWarperCount(
    original: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetWarpers(
    original: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], Warpers.WarperStructOutput[]]>;

  checkRegisteredWarper(
    warper: string,
    overrides?: CallOverrides
  ): Promise<void>;

  checkSupportedAsset(asset: string, overrides?: CallOverrides): Promise<void>;

  deregisterWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWarperAdmin(
    warper: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metahub(overrides?: CallOverrides): Promise<string>;

  pauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerWarper(
    warper: string,
    params: IWarperManager.WarperRegistrationParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWarperController(
    warpers: string[],
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  universeWarperCount(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeWarpers(
    universeId: BigNumberish,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], Warpers.WarperStructOutput[]]>;

  unpauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  warperController(warper: string, overrides?: CallOverrides): Promise<string>;

  warperInfo(
    warper: string,
    overrides?: CallOverrides
  ): Promise<Warpers.WarperStructOutput>;

  warperPresetFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    checkRegisteredWarper(
      warper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSupportedAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metahub(overrides?: CallOverrides): Promise<string>;

    pauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setWarperController(
      warpers: string[],
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    unpauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<string>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<Warpers.WarperStructOutput>;

    warperPresetFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "WarperDeregistered(address)"(
      warper?: string | null
    ): WarperDeregisteredEventFilter;
    WarperDeregistered(warper?: string | null): WarperDeregisteredEventFilter;

    "WarperPaused(address)"(warper?: string | null): WarperPausedEventFilter;
    WarperPaused(warper?: string | null): WarperPausedEventFilter;

    "WarperRegistered(uint256,address,address,bytes4)"(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null,
      assetClass?: null
    ): WarperRegisteredEventFilter;
    WarperRegistered(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null,
      assetClass?: null
    ): WarperRegisteredEventFilter;

    "WarperUnpaused(address)"(
      warper?: string | null
    ): WarperUnpausedEventFilter;
    WarperUnpaused(warper?: string | null): WarperUnpausedEventFilter;
  };

  estimateGas: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRegisteredWarper(
      warper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSupportedAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metahub(overrides?: CallOverrides): Promise<BigNumber>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWarperController(
      warpers: string[],
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperInfo(warper: string, overrides?: CallOverrides): Promise<BigNumber>;

    warperPresetFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRegisteredWarper(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSupportedAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metahub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWarperController(
      warpers: string[],
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperPresetFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
