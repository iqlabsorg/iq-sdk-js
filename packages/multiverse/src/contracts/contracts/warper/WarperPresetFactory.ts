/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IWarperPresetFactory {
  export type WarperPresetStruct = {
    id: BytesLike;
    implementation: string;
    enabled: boolean;
  };

  export type WarperPresetStructOutput = [string, string, boolean] & {
    id: string;
    implementation: string;
    enabled: boolean;
  };
}

export interface WarperPresetFactoryInterface extends utils.Interface {
  functions: {
    "addPreset(bytes32,address)": FunctionFragment;
    "deployPreset(bytes32,bytes)": FunctionFragment;
    "disablePreset(bytes32)": FunctionFragment;
    "enablePreset(bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "preset(bytes32)": FunctionFragment;
    "presetEnabled(bytes32)": FunctionFragment;
    "presets()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removePreset(bytes32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPreset"
      | "deployPreset"
      | "disablePreset"
      | "enablePreset"
      | "initialize"
      | "preset"
      | "presetEnabled"
      | "presets"
      | "proxiableUUID"
      | "removePreset"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPreset",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPreset",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disablePreset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePreset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "preset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "presetEnabled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "presets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePreset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addPreset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployPreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disablePreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enablePreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presetEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "presets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WarperPresetAdded(bytes32,address)": EventFragment;
    "WarperPresetDeployed(bytes32,address)": EventFragment;
    "WarperPresetDisabled(bytes32)": EventFragment;
    "WarperPresetEnabled(bytes32)": EventFragment;
    "WarperPresetRemoved(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPresetRemoved"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WarperPresetAddedEventObject {
  presetId: string;
  implementation: string;
}
export type WarperPresetAddedEvent = TypedEvent<
  [string, string],
  WarperPresetAddedEventObject
>;

export type WarperPresetAddedEventFilter =
  TypedEventFilter<WarperPresetAddedEvent>;

export interface WarperPresetDeployedEventObject {
  presetId: string;
  warper: string;
}
export type WarperPresetDeployedEvent = TypedEvent<
  [string, string],
  WarperPresetDeployedEventObject
>;

export type WarperPresetDeployedEventFilter =
  TypedEventFilter<WarperPresetDeployedEvent>;

export interface WarperPresetDisabledEventObject {
  presetId: string;
}
export type WarperPresetDisabledEvent = TypedEvent<
  [string],
  WarperPresetDisabledEventObject
>;

export type WarperPresetDisabledEventFilter =
  TypedEventFilter<WarperPresetDisabledEvent>;

export interface WarperPresetEnabledEventObject {
  presetId: string;
}
export type WarperPresetEnabledEvent = TypedEvent<
  [string],
  WarperPresetEnabledEventObject
>;

export type WarperPresetEnabledEventFilter =
  TypedEventFilter<WarperPresetEnabledEvent>;

export interface WarperPresetRemovedEventObject {
  presetId: string;
}
export type WarperPresetRemovedEvent = TypedEvent<
  [string],
  WarperPresetRemovedEventObject
>;

export type WarperPresetRemovedEventFilter =
  TypedEventFilter<WarperPresetRemovedEvent>;

export interface WarperPresetFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WarperPresetFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      acl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[IWarperPresetFactory.WarperPresetStructOutput]>;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    presets(
      overrides?: CallOverrides
    ): Promise<[IWarperPresetFactory.WarperPresetStructOutput[]]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPreset(
    presetId: BytesLike,
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPreset(
    presetId: BytesLike,
    initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disablePreset(
    presetId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enablePreset(
    presetId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    acl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preset(
    presetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWarperPresetFactory.WarperPresetStructOutput>;

  presetEnabled(
    presetId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  presets(
    overrides?: CallOverrides
  ): Promise<IWarperPresetFactory.WarperPresetStructOutput[]>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removePreset(
    presetId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    disablePreset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enablePreset(presetId: BytesLike, overrides?: CallOverrides): Promise<void>;

    initialize(acl: string, overrides?: CallOverrides): Promise<void>;

    preset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWarperPresetFactory.WarperPresetStructOutput>;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    presets(
      overrides?: CallOverrides
    ): Promise<IWarperPresetFactory.WarperPresetStructOutput[]>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removePreset(presetId: BytesLike, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WarperPresetAdded(bytes32,address)"(
      presetId?: BytesLike | null,
      implementation?: string | null
    ): WarperPresetAddedEventFilter;
    WarperPresetAdded(
      presetId?: BytesLike | null,
      implementation?: string | null
    ): WarperPresetAddedEventFilter;

    "WarperPresetDeployed(bytes32,address)"(
      presetId?: BytesLike | null,
      warper?: string | null
    ): WarperPresetDeployedEventFilter;
    WarperPresetDeployed(
      presetId?: BytesLike | null,
      warper?: string | null
    ): WarperPresetDeployedEventFilter;

    "WarperPresetDisabled(bytes32)"(
      presetId?: BytesLike | null
    ): WarperPresetDisabledEventFilter;
    WarperPresetDisabled(
      presetId?: BytesLike | null
    ): WarperPresetDisabledEventFilter;

    "WarperPresetEnabled(bytes32)"(
      presetId?: BytesLike | null
    ): WarperPresetEnabledEventFilter;
    WarperPresetEnabled(
      presetId?: BytesLike | null
    ): WarperPresetEnabledEventFilter;

    "WarperPresetRemoved(bytes32)"(
      presetId?: BytesLike | null
    ): WarperPresetRemovedEventFilter;
    WarperPresetRemoved(
      presetId?: BytesLike | null
    ): WarperPresetRemovedEventFilter;
  };

  estimateGas: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      acl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preset(presetId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presets(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPreset(
      presetId: BytesLike,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPreset(
      presetId: BytesLike,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enablePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      acl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preset(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presetEnabled(
      presetId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePreset(
      presetId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
