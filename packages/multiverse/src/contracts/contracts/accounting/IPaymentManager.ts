/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Accounts {
  export type BalanceStruct = { token: string; amount: BigNumberish };

  export type BalanceStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface IPaymentManagerInterface extends utils.Interface {
  functions: {
    "balance(address,address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "protocolBalance(address)": FunctionFragment;
    "protocolBalances()": FunctionFragment;
    "universeBalance(uint256,address)": FunctionFragment;
    "universeBalances(uint256)": FunctionFragment;
    "withdrawFunds(address,uint256,address)": FunctionFragment;
    "withdrawProtocolFunds(address,uint256,address)": FunctionFragment;
    "withdrawUniverseFunds(uint256,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balance"
      | "balances"
      | "protocolBalance"
      | "protocolBalances"
      | "universeBalance"
      | "universeBalances"
      | "withdrawFunds"
      | "withdrawProtocolFunds"
      | "withdrawUniverseFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUniverseFunds",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUniverseFunds",
    data: BytesLike
  ): Result;

  events: {
    "ProtocolEarned(address,uint256)": EventFragment;
    "UniverseEarned(uint256,address,uint256)": EventFragment;
    "UserEarned(address,uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProtocolEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniverseEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserEarned"): EventFragment;
}

export interface ProtocolEarnedEventObject {
  paymentToken: string;
  amount: BigNumber;
}
export type ProtocolEarnedEvent = TypedEvent<
  [string, BigNumber],
  ProtocolEarnedEventObject
>;

export type ProtocolEarnedEventFilter = TypedEventFilter<ProtocolEarnedEvent>;

export interface UniverseEarnedEventObject {
  universeId: BigNumber;
  paymentToken: string;
  amount: BigNumber;
}
export type UniverseEarnedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UniverseEarnedEventObject
>;

export type UniverseEarnedEventFilter = TypedEventFilter<UniverseEarnedEvent>;

export interface UserEarnedEventObject {
  user: string;
  earningType: number;
  paymentToken: string;
  amount: BigNumber;
}
export type UserEarnedEvent = TypedEvent<
  [string, number, string, BigNumber],
  UserEarnedEventObject
>;

export type UserEarnedEventFilter = TypedEventFilter<UserEarnedEvent>;

export interface IPaymentManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPaymentManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<[Accounts.BalanceStructOutput[]]>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<[Accounts.BalanceStructOutput[]]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Accounts.BalanceStructOutput[]]>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(
    account: string,
    overrides?: CallOverrides
  ): Promise<Accounts.BalanceStructOutput[]>;

  protocolBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  protocolBalances(
    overrides?: CallOverrides
  ): Promise<Accounts.BalanceStructOutput[]>;

  universeBalance(
    universeId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeBalances(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Accounts.BalanceStructOutput[]>;

  withdrawFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUniverseFunds(
    universeId: BigNumberish,
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<Accounts.BalanceStructOutput[]>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<Accounts.BalanceStructOutput[]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Accounts.BalanceStructOutput[]>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProtocolEarned(address,uint256)"(
      paymentToken?: string | null,
      amount?: null
    ): ProtocolEarnedEventFilter;
    ProtocolEarned(
      paymentToken?: string | null,
      amount?: null
    ): ProtocolEarnedEventFilter;

    "UniverseEarned(uint256,address,uint256)"(
      universeId?: BigNumberish | null,
      paymentToken?: string | null,
      amount?: null
    ): UniverseEarnedEventFilter;
    UniverseEarned(
      universeId?: BigNumberish | null,
      paymentToken?: string | null,
      amount?: null
    ): UniverseEarnedEventFilter;

    "UserEarned(address,uint8,address,uint256)"(
      user?: string | null,
      earningType?: BigNumberish | null,
      paymentToken?: string | null,
      amount?: null
    ): UserEarnedEventFilter;
    UserEarned(
      user?: string | null,
      earningType?: BigNumberish | null,
      paymentToken?: string | null,
      amount?: null
    ): UserEarnedEventFilter;
  };

  estimateGas: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(overrides?: CallOverrides): Promise<BigNumber>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
