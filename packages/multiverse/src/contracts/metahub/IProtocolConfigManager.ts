/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IProtocolConfigManagerInterface extends utils.Interface {
  functions: {
    "baseToken()": FunctionFragment;
    "protocolRentalFeePercent()": FunctionFragment;
    "setProtocolRentalFeePercent(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseToken"
      | "protocolRentalFeePercent"
      | "setProtocolRentalFeePercent"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolRentalFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolRentalFeePercent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolRentalFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolRentalFeePercent",
    data: BytesLike
  ): Result;

  events: {
    "ProtocolRentalFeeChanged(uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProtocolRentalFeeChanged"): EventFragment;
}

export interface ProtocolRentalFeeChangedEventObject {
  rentalFeePercent: number;
}
export type ProtocolRentalFeeChangedEvent = TypedEvent<
  [number],
  ProtocolRentalFeeChangedEventObject
>;

export type ProtocolRentalFeeChangedEventFilter =
  TypedEventFilter<ProtocolRentalFeeChangedEvent>;

export interface IProtocolConfigManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProtocolConfigManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseToken(overrides?: CallOverrides): Promise<[string]>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<[number]>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseToken(overrides?: CallOverrides): Promise<string>;

  protocolRentalFeePercent(overrides?: CallOverrides): Promise<number>;

  setProtocolRentalFeePercent(
    rentalFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseToken(overrides?: CallOverrides): Promise<string>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<number>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProtocolRentalFeeChanged(uint16)"(
      rentalFeePercent?: null
    ): ProtocolRentalFeeChangedEventFilter;
    ProtocolRentalFeeChanged(
      rentalFeePercent?: null
    ): ProtocolRentalFeeChangedEventFilter;
  };

  estimateGas: {
    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRentalFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
