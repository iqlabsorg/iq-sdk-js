/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Assets {
  export type AssetIdStruct = { class: BytesLike; data: BytesLike };

  export type AssetIdStructOutput = [string, string] & {
    class: string;
    data: string;
  };

  export type AssetStruct = { id: Assets.AssetIdStruct; value: BigNumberish };

  export type AssetStructOutput = [Assets.AssetIdStructOutput, BigNumber] & {
    id: Assets.AssetIdStructOutput;
    value: BigNumber;
  };
}

export declare namespace Listings {
  export type ParamsStruct = { strategy: BytesLike; data: BytesLike };

  export type ParamsStructOutput = [string, string] & {
    strategy: string;
    data: string;
  };

  export type ListingStruct = {
    asset: Assets.AssetStruct;
    params: Listings.ParamsStruct;
    lister: string;
    maxLockPeriod: BigNumberish;
    lockedTill: BigNumberish;
    immediatePayout: boolean;
    delisted: boolean;
    paused: boolean;
  };

  export type ListingStructOutput = [
    Assets.AssetStructOutput,
    Listings.ParamsStructOutput,
    string,
    number,
    number,
    boolean,
    boolean,
    boolean
  ] & {
    asset: Assets.AssetStructOutput;
    params: Listings.ParamsStructOutput;
    lister: string;
    maxLockPeriod: number;
    lockedTill: number;
    immediatePayout: boolean;
    delisted: boolean;
    paused: boolean;
  };
}

export declare namespace Warpers {
  export type WarperStruct = {
    original: string;
    controller: string;
    name: string;
    universeId: BigNumberish;
    paused: boolean;
  };

  export type WarperStructOutput = [
    string,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    original: string;
    controller: string;
    name: string;
    universeId: BigNumber;
    paused: boolean;
  };
}

export declare namespace Accounts {
  export type BalanceStruct = { token: string; amount: BigNumberish };

  export type BalanceStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export declare namespace Rentings {
  export type ParamsStruct = {
    listingId: BigNumberish;
    warper: string;
    renter: string;
    rentalPeriod: BigNumberish;
    paymentToken: string;
  };

  export type ParamsStructOutput = [
    BigNumber,
    string,
    string,
    number,
    string
  ] & {
    listingId: BigNumber;
    warper: string;
    renter: string;
    rentalPeriod: number;
    paymentToken: string;
  };

  export type RentalFeesStruct = {
    total: BigNumberish;
    protocolFee: BigNumberish;
    listerBaseFee: BigNumberish;
    listerPremium: BigNumberish;
    universeBaseFee: BigNumberish;
    universePremium: BigNumberish;
  };

  export type RentalFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    total: BigNumber;
    protocolFee: BigNumber;
    listerBaseFee: BigNumber;
    listerPremium: BigNumber;
    universeBaseFee: BigNumber;
    universePremium: BigNumber;
  };

  export type AgreementStruct = {
    warpedAsset: Assets.AssetStruct;
    collectionId: BytesLike;
    listingId: BigNumberish;
    renter: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
  };

  export type AgreementStructOutput = [
    Assets.AssetStructOutput,
    string,
    BigNumber,
    string,
    number,
    number
  ] & {
    warpedAsset: Assets.AssetStructOutput;
    collectionId: string;
    listingId: BigNumber;
    renter: string;
    startTime: number;
    endTime: number;
  };
}

export declare namespace Metahub {
  export type MetahubInitParamsStruct = {
    warperPresetFactory: string;
    assetClassRegistry: string;
    listingStrategyRegistry: string;
    universeRegistry: string;
    acl: string;
    baseToken: string;
    rentalFeePercent: BigNumberish;
  };

  export type MetahubInitParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    number
  ] & {
    warperPresetFactory: string;
    assetClassRegistry: string;
    listingStrategyRegistry: string;
    universeRegistry: string;
    acl: string;
    baseToken: string;
    rentalFeePercent: number;
  };
}

export declare namespace IWarperManager {
  export type WarperRegistrationParamsStruct = {
    name: string;
    universeId: BigNumberish;
    paused: boolean;
  };

  export type WarperRegistrationParamsStructOutput = [
    string,
    BigNumber,
    boolean
  ] & { name: string; universeId: BigNumber; paused: boolean };
}

export interface MetahubInterface extends utils.Interface {
  functions: {
    "assetRentalStatus((bytes4,bytes))": FunctionFragment;
    "assetWarperCount(address)": FunctionFragment;
    "assetWarpers(address,uint256,uint256)": FunctionFragment;
    "balance(address)": FunctionFragment;
    "balances()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "collectionRentedValue(bytes32,address)": FunctionFragment;
    "delistAsset(uint256)": FunctionFragment;
    "deregisterWarper(address)": FunctionFragment;
    "estimateRent((uint256,address,address,uint32,address))": FunctionFragment;
    "initialize((address,address,address,address,address,address,uint16))": FunctionFragment;
    "isWarperAdmin(address,address)": FunctionFragment;
    "listAsset(((bytes4,bytes),uint256),(bytes4,bytes),uint32,bool)": FunctionFragment;
    "listingCount()": FunctionFragment;
    "listingInfo(uint256)": FunctionFragment;
    "listings(uint256,uint256)": FunctionFragment;
    "pauseListing(uint256)": FunctionFragment;
    "pauseWarper(address)": FunctionFragment;
    "protocolBalance(address)": FunctionFragment;
    "protocolBalances()": FunctionFragment;
    "protocolRentalFeePercent()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerWarper(address,(string,uint256,bool))": FunctionFragment;
    "rent((uint256,address,address,uint32,address),uint256)": FunctionFragment;
    "rentalAgreementInfo(uint256)": FunctionFragment;
    "setProtocolRentalFeePercent(uint16)": FunctionFragment;
    "supportedAssetCount()": FunctionFragment;
    "supportedAssets(uint256,uint256)": FunctionFragment;
    "universeBalance(uint256,address)": FunctionFragment;
    "universeBalances(uint256)": FunctionFragment;
    "universeWarperCount(uint256)": FunctionFragment;
    "universeWarpers(uint256,uint256,uint256)": FunctionFragment;
    "unpauseListing(uint256)": FunctionFragment;
    "unpauseWarper(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userListingCount(address)": FunctionFragment;
    "userListings(address,uint256,uint256)": FunctionFragment;
    "userRentalAgreements(address,uint256,uint256)": FunctionFragment;
    "userRentalCount(address)": FunctionFragment;
    "warperController(address)": FunctionFragment;
    "warperInfo(address)": FunctionFragment;
    "warperPresetFactory()": FunctionFragment;
    "withdrawAsset(uint256)": FunctionFragment;
    "withdrawFunds(address,uint256,address)": FunctionFragment;
    "withdrawProtocolFunds(address,uint256,address)": FunctionFragment;
    "withdrawUniverseFunds(uint256,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetRentalStatus"
      | "assetWarperCount"
      | "assetWarpers"
      | "balance"
      | "balances"
      | "baseToken"
      | "collectionRentedValue"
      | "delistAsset"
      | "deregisterWarper"
      | "estimateRent"
      | "initialize"
      | "isWarperAdmin"
      | "listAsset"
      | "listingCount"
      | "listingInfo"
      | "listings"
      | "pauseListing"
      | "pauseWarper"
      | "protocolBalance"
      | "protocolBalances"
      | "protocolRentalFeePercent"
      | "proxiableUUID"
      | "registerWarper"
      | "rent"
      | "rentalAgreementInfo"
      | "setProtocolRentalFeePercent"
      | "supportedAssetCount"
      | "supportedAssets"
      | "universeBalance"
      | "universeBalances"
      | "universeWarperCount"
      | "universeWarpers"
      | "unpauseListing"
      | "unpauseWarper"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userListingCount"
      | "userListings"
      | "userRentalAgreements"
      | "userRentalCount"
      | "warperController"
      | "warperInfo"
      | "warperPresetFactory"
      | "withdrawAsset"
      | "withdrawFunds"
      | "withdrawProtocolFunds"
      | "withdrawUniverseFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetRentalStatus",
    values: [Assets.AssetIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWarperCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWarpers",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectionRentedValue",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delistAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRent",
    values: [Rentings.ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [Metahub.MetahubInitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isWarperAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listAsset",
    values: [Assets.AssetStruct, Listings.ParamsStruct, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "listingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pauseWarper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRentalFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerWarper",
    values: [string, IWarperManager.WarperRegistrationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [Rentings.ParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalAgreementInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolRentalFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarperCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarpers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseWarper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalAgreements",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "warperController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "warperInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "warperPresetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUniverseFunds",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetRentalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionRentedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWarperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolRentalFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentalAgreementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolRentalFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warperController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warperInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warperPresetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUniverseFunds",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AssetDelisted(uint256,address,uint32)": EventFragment;
    "AssetListed(uint256,address,tuple,tuple,uint32)": EventFragment;
    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)": EventFragment;
    "AssetWithdrawn(uint256,address,tuple)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ListingPaused(uint256)": EventFragment;
    "ListingUnpaused(uint256)": EventFragment;
    "ProtocolRentalFeeChanged(uint16)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WarperDeregistered(address)": EventFragment;
    "WarperPaused(address)": EventFragment;
    "WarperRegistered(uint256,address,address)": EventFragment;
    "WarperUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolRentalFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperUnpaused"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AssetDelistedEventObject {
  listingId: BigNumber;
  lister: string;
  unlocksAt: number;
}
export type AssetDelistedEvent = TypedEvent<
  [BigNumber, string, number],
  AssetDelistedEventObject
>;

export type AssetDelistedEventFilter = TypedEventFilter<AssetDelistedEvent>;

export interface AssetListedEventObject {
  listingId: BigNumber;
  lister: string;
  asset: Assets.AssetStructOutput;
  params: Listings.ParamsStructOutput;
  maxLockPeriod: number;
}
export type AssetListedEvent = TypedEvent<
  [
    BigNumber,
    string,
    Assets.AssetStructOutput,
    Listings.ParamsStructOutput,
    number
  ],
  AssetListedEventObject
>;

export type AssetListedEventFilter = TypedEventFilter<AssetListedEvent>;

export interface AssetRentedEventObject {
  rentalId: BigNumber;
  renter: string;
  listingId: BigNumber;
  warpedAsset: Assets.AssetStructOutput;
  startTime: number;
  endTime: number;
}
export type AssetRentedEvent = TypedEvent<
  [BigNumber, string, BigNumber, Assets.AssetStructOutput, number, number],
  AssetRentedEventObject
>;

export type AssetRentedEventFilter = TypedEventFilter<AssetRentedEvent>;

export interface AssetWithdrawnEventObject {
  listingId: BigNumber;
  lister: string;
  asset: Assets.AssetStructOutput;
}
export type AssetWithdrawnEvent = TypedEvent<
  [BigNumber, string, Assets.AssetStructOutput],
  AssetWithdrawnEventObject
>;

export type AssetWithdrawnEventFilter = TypedEventFilter<AssetWithdrawnEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ListingPausedEventObject {
  listingId: BigNumber;
}
export type ListingPausedEvent = TypedEvent<
  [BigNumber],
  ListingPausedEventObject
>;

export type ListingPausedEventFilter = TypedEventFilter<ListingPausedEvent>;

export interface ListingUnpausedEventObject {
  listingId: BigNumber;
}
export type ListingUnpausedEvent = TypedEvent<
  [BigNumber],
  ListingUnpausedEventObject
>;

export type ListingUnpausedEventFilter = TypedEventFilter<ListingUnpausedEvent>;

export interface ProtocolRentalFeeChangedEventObject {
  rentalFeePercent: number;
}
export type ProtocolRentalFeeChangedEvent = TypedEvent<
  [number],
  ProtocolRentalFeeChangedEventObject
>;

export type ProtocolRentalFeeChangedEventFilter =
  TypedEventFilter<ProtocolRentalFeeChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WarperDeregisteredEventObject {
  warper: string;
}
export type WarperDeregisteredEvent = TypedEvent<
  [string],
  WarperDeregisteredEventObject
>;

export type WarperDeregisteredEventFilter =
  TypedEventFilter<WarperDeregisteredEvent>;

export interface WarperPausedEventObject {
  warper: string;
}
export type WarperPausedEvent = TypedEvent<[string], WarperPausedEventObject>;

export type WarperPausedEventFilter = TypedEventFilter<WarperPausedEvent>;

export interface WarperRegisteredEventObject {
  universeId: BigNumber;
  warper: string;
  original: string;
}
export type WarperRegisteredEvent = TypedEvent<
  [BigNumber, string, string],
  WarperRegisteredEventObject
>;

export type WarperRegisteredEventFilter =
  TypedEventFilter<WarperRegisteredEvent>;

export interface WarperUnpausedEventObject {
  warper: string;
}
export type WarperUnpausedEvent = TypedEvent<
  [string],
  WarperUnpausedEventObject
>;

export type WarperUnpausedEventFilter = TypedEventFilter<WarperUnpausedEvent>;

export interface Metahub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetahubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    balance(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balances(
      overrides?: CallOverrides
    ): Promise<[Accounts.BalanceStructOutput[]]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<[Rentings.RentalFeesStructOutput]>;

    initialize(
      params: Metahub.MetahubInitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listAsset(
      asset: Assets.AssetStruct,
      params: Listings.ParamsStruct,
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listingCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Listings.ListingStructOutput]>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Listings.ListingStructOutput[]]>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<[Accounts.BalanceStructOutput[]]>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<[number]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Rentings.AgreementStructOutput]>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Accounts.BalanceStructOutput[]]>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Listings.ListingStructOutput[]]>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Rentings.AgreementStructOutput[]]>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[Warpers.WarperStructOutput]>;

    warperPresetFactory(overrides?: CallOverrides): Promise<[string]>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetRentalStatus(
    warpedAssetId: Assets.AssetIdStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  assetWarperCount(
    original: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetWarpers(
    original: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], Warpers.WarperStructOutput[]]>;

  balance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  balances(overrides?: CallOverrides): Promise<Accounts.BalanceStructOutput[]>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  collectionRentedValue(
    warpedCollectionId: BytesLike,
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delistAsset(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deregisterWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateRent(
    rentingParams: Rentings.ParamsStruct,
    overrides?: CallOverrides
  ): Promise<Rentings.RentalFeesStructOutput>;

  initialize(
    params: Metahub.MetahubInitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWarperAdmin(
    warper: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listAsset(
    asset: Assets.AssetStruct,
    params: Listings.ParamsStruct,
    maxLockPeriod: BigNumberish,
    immediatePayout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listingCount(overrides?: CallOverrides): Promise<BigNumber>;

  listingInfo(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Listings.ListingStructOutput>;

  listings(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], Listings.ListingStructOutput[]]>;

  pauseListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  protocolBalances(
    overrides?: CallOverrides
  ): Promise<Accounts.BalanceStructOutput[]>;

  protocolRentalFeePercent(overrides?: CallOverrides): Promise<number>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerWarper(
    warper: string,
    params: IWarperManager.WarperRegistrationParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rent(
    rentingParams: Rentings.ParamsStruct,
    maxPaymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentalAgreementInfo(
    rentalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Rentings.AgreementStructOutput>;

  setProtocolRentalFeePercent(
    rentalFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  supportedAssets(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  universeBalance(
    universeId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeBalances(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Accounts.BalanceStructOutput[]>;

  universeWarperCount(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeWarpers(
    universeId: BigNumberish,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], Warpers.WarperStructOutput[]]>;

  unpauseListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userListingCount(
    lister: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userListings(
    lister: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], Listings.ListingStructOutput[]]>;

  userRentalAgreements(
    renter: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], Rentings.AgreementStructOutput[]]>;

  userRentalCount(
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  warperController(warper: string, overrides?: CallOverrides): Promise<string>;

  warperInfo(
    warper: string,
    overrides?: CallOverrides
  ): Promise<Warpers.WarperStructOutput>;

  warperPresetFactory(overrides?: CallOverrides): Promise<string>;

  withdrawAsset(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUniverseFunds(
    universeId: BigNumberish,
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    balance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(
      overrides?: CallOverrides
    ): Promise<Accounts.BalanceStructOutput[]>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<Rentings.RentalFeesStructOutput>;

    initialize(
      params: Metahub.MetahubInitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listAsset(
      asset: Assets.AssetStruct,
      params: Listings.ParamsStruct,
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Listings.ListingStructOutput>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Listings.ListingStructOutput[]]>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<Accounts.BalanceStructOutput[]>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<number>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Rentings.AgreementStructOutput>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Accounts.BalanceStructOutput[]>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], Warpers.WarperStructOutput[]]>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Listings.ListingStructOutput[]]>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], Rentings.AgreementStructOutput[]]>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<string>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<Warpers.WarperStructOutput>;

    warperPresetFactory(overrides?: CallOverrides): Promise<string>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AssetDelisted(uint256,address,uint32)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      unlocksAt?: null
    ): AssetDelistedEventFilter;
    AssetDelisted(
      listingId?: BigNumberish | null,
      lister?: string | null,
      unlocksAt?: null
    ): AssetDelistedEventFilter;

    "AssetListed(uint256,address,tuple,tuple,uint32)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null,
      params?: null,
      maxLockPeriod?: null
    ): AssetListedEventFilter;
    AssetListed(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null,
      params?: null,
      maxLockPeriod?: null
    ): AssetListedEventFilter;

    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)"(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): AssetRentedEventFilter;
    AssetRented(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): AssetRentedEventFilter;

    "AssetWithdrawn(uint256,address,tuple)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null
    ): AssetWithdrawnEventFilter;
    AssetWithdrawn(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null
    ): AssetWithdrawnEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ListingPaused(uint256)"(
      listingId?: BigNumberish | null
    ): ListingPausedEventFilter;
    ListingPaused(listingId?: BigNumberish | null): ListingPausedEventFilter;

    "ListingUnpaused(uint256)"(
      listingId?: BigNumberish | null
    ): ListingUnpausedEventFilter;
    ListingUnpaused(
      listingId?: BigNumberish | null
    ): ListingUnpausedEventFilter;

    "ProtocolRentalFeeChanged(uint16)"(
      rentalFeePercent?: null
    ): ProtocolRentalFeeChangedEventFilter;
    ProtocolRentalFeeChanged(
      rentalFeePercent?: null
    ): ProtocolRentalFeeChangedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WarperDeregistered(address)"(
      warper?: string | null
    ): WarperDeregisteredEventFilter;
    WarperDeregistered(warper?: string | null): WarperDeregisteredEventFilter;

    "WarperPaused(address)"(warper?: string | null): WarperPausedEventFilter;
    WarperPaused(warper?: string | null): WarperPausedEventFilter;

    "WarperRegistered(uint256,address,address)"(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null
    ): WarperRegisteredEventFilter;
    WarperRegistered(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null
    ): WarperRegisteredEventFilter;

    "WarperUnpaused(address)"(
      warper?: string | null
    ): WarperUnpausedEventFilter;
    WarperUnpaused(warper?: string | null): WarperUnpausedEventFilter;
  };

  estimateGas: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      params: Metahub.MetahubInitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAsset(
      asset: Assets.AssetStruct,
      params: Listings.ParamsStruct,
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperInfo(warper: string, overrides?: CallOverrides): Promise<BigNumber>;

    warperPresetFactory(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetRentalStatus(
      warpedAssetId: Assets.AssetIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateRent(
      rentingParams: Rentings.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: Metahub.MetahubInitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAsset(
      asset: Assets.AssetStruct,
      params: Listings.ParamsStruct,
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRentalFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerWarper(
      warper: string,
      params: IWarperManager.WarperRegistrationParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rent(
      rentingParams: Rentings.ParamsStruct,
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperPresetFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
