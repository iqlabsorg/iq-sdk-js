/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MetahubInterface extends ethers.utils.Interface {
  functions: {
    "assetListingCount(address)": FunctionFragment;
    "assetListings(address,uint256,uint256)": FunctionFragment;
    "assetRentalStatus((bytes4,bytes))": FunctionFragment;
    "assetWarperCount(address)": FunctionFragment;
    "assetWarpers(address,uint256,uint256)": FunctionFragment;
    "balance(address,address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "collectionRentedValue(bytes32,address)": FunctionFragment;
    "delistAsset(uint256)": FunctionFragment;
    "deregisterWarper(address)": FunctionFragment;
    "estimateRent((uint256,address,address,uint32,address))": FunctionFragment;
    "initialize((address,address,address,address,address,address,uint16))": FunctionFragment;
    "isWarperAdmin(address,address)": FunctionFragment;
    "listAsset(((bytes4,bytes),uint256),(bytes4,bytes),uint32,bool)": FunctionFragment;
    "listingCount()": FunctionFragment;
    "listingInfo(uint256)": FunctionFragment;
    "listings(uint256,uint256)": FunctionFragment;
    "pauseListing(uint256)": FunctionFragment;
    "pauseWarper(address)": FunctionFragment;
    "protocolBalance(address)": FunctionFragment;
    "protocolBalances()": FunctionFragment;
    "protocolRentalFeePercent()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerWarper(address,(string,uint256,bool))": FunctionFragment;
    "rent((uint256,address,address,uint32,address),uint256)": FunctionFragment;
    "rentalAgreementInfo(uint256)": FunctionFragment;
    "setProtocolRentalFeePercent(uint16)": FunctionFragment;
    "supportedAssetCount()": FunctionFragment;
    "supportedAssets(uint256,uint256)": FunctionFragment;
    "universeBalance(uint256,address)": FunctionFragment;
    "universeBalances(uint256)": FunctionFragment;
    "universeWarperCount(uint256)": FunctionFragment;
    "universeWarpers(uint256,uint256,uint256)": FunctionFragment;
    "unpauseListing(uint256)": FunctionFragment;
    "unpauseWarper(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userListingCount(address)": FunctionFragment;
    "userListings(address,uint256,uint256)": FunctionFragment;
    "userRentalAgreements(address,uint256,uint256)": FunctionFragment;
    "userRentalCount(address)": FunctionFragment;
    "warperController(address)": FunctionFragment;
    "warperInfo(address)": FunctionFragment;
    "warperPresetFactory()": FunctionFragment;
    "withdrawAsset(uint256)": FunctionFragment;
    "withdrawFunds(address,uint256,address)": FunctionFragment;
    "withdrawProtocolFunds(address,uint256,address)": FunctionFragment;
    "withdrawUniverseFunds(uint256,address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetListings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetRentalStatus",
    values: [{ class: BytesLike; data: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWarperCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetWarpers",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectionRentedValue",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delistAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterWarper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRent",
    values: [
      {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        warperPresetFactory: string;
        assetClassRegistry: string;
        listingStrategyRegistry: string;
        universeRegistry: string;
        acl: string;
        baseToken: string;
        rentalFeePercent: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWarperAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listAsset",
    values: [
      { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      { strategy: BytesLike; data: BytesLike },
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pauseWarper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRentalFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerWarper",
    values: [
      string,
      { name: string; universeId: BigNumberish; paused: boolean }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [
      {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalAgreementInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolRentalFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarperCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "universeWarpers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseWarper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalAgreements",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRentalCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "warperController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "warperInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "warperPresetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUniverseFunds",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetRentalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionRentedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWarperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolRentalFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentalAgreementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolRentalFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeWarpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseWarper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRentalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warperController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warperInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warperPresetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUniverseFunds",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AssetDelisted(uint256,address,uint32)": EventFragment;
    "AssetListed(uint256,address,tuple,tuple,uint32)": EventFragment;
    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)": EventFragment;
    "AssetWithdrawn(uint256,address,tuple)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ListingPaused(uint256)": EventFragment;
    "ListingUnpaused(uint256)": EventFragment;
    "ProtocolRentalFeeChanged(uint16)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WarperDeregistered(address)": EventFragment;
    "WarperPaused(address)": EventFragment;
    "WarperRegistered(uint256,address,address)": EventFragment;
    "WarperUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolRentalFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarperUnpaused"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type AssetDelistedEvent = TypedEvent<
  [BigNumber, string, number] & {
    listingId: BigNumber;
    lister: string;
    unlocksAt: number;
  }
>;

export type AssetListedEvent = TypedEvent<
  [
    BigNumber,
    string,
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    },
    [string, string] & { strategy: string; data: string },
    number
  ] & {
    listingId: BigNumber;
    lister: string;
    asset: [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
    params: [string, string] & { strategy: string; data: string };
    maxLockPeriod: number;
  }
>;

export type AssetRentedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    },
    number,
    number
  ] & {
    rentalId: BigNumber;
    renter: string;
    listingId: BigNumber;
    warpedAsset: [
      [string, string] & { class: string; data: string },
      BigNumber
    ] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
    startTime: number;
    endTime: number;
  }
>;

export type AssetWithdrawnEvent = TypedEvent<
  [
    BigNumber,
    string,
    [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    }
  ] & {
    listingId: BigNumber;
    lister: string;
    asset: [[string, string] & { class: string; data: string }, BigNumber] & {
      id: [string, string] & { class: string; data: string };
      value: BigNumber;
    };
  }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type ListingPausedEvent = TypedEvent<
  [BigNumber] & { listingId: BigNumber }
>;

export type ListingUnpausedEvent = TypedEvent<
  [BigNumber] & { listingId: BigNumber }
>;

export type ProtocolRentalFeeChangedEvent = TypedEvent<
  [number] & { rentalFeePercent: number }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export type WarperDeregisteredEvent = TypedEvent<[string] & { warper: string }>;

export type WarperPausedEvent = TypedEvent<[string] & { warper: string }>;

export type WarperRegisteredEvent = TypedEvent<
  [BigNumber, string, string] & {
    universeId: BigNumber;
    warper: string;
    original: string;
  }
>;

export type WarperUnpausedEvent = TypedEvent<[string] & { warper: string }>;

export class Metahub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetahubInterface;

  functions: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<[number]>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]]
    >;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          total: BigNumber;
          protocolFee: BigNumber;
          listerBaseFee: BigNumber;
          listerPremium: BigNumber;
          universeBaseFee: BigNumber;
          universePremium: BigNumber;
        }
      ]
    >;

    initialize(
      params: {
        warperPresetFactory: string;
        assetClassRegistry: string;
        listingStrategyRegistry: string;
        universeRegistry: string;
        acl: string;
        baseToken: string;
        rentalFeePercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listingCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        }
      ]
    >;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]]
    >;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<[number]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          string,
          BigNumber,
          string,
          number,
          number
        ] & {
          warpedAsset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          collectionId: string;
          listingId: BigNumber;
          renter: string;
          startTime: number;
          endTime: number;
        }
      ]
    >;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]]
    >;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          string,
          BigNumber,
          string,
          number,
          number
        ] & {
          warpedAsset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          collectionId: string;
          listingId: BigNumber;
          renter: string;
          startTime: number;
          endTime: number;
        })[]
      ]
    >;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        }
      ]
    >;

    warperPresetFactory(overrides?: CallOverrides): Promise<[string]>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetListingCount(
    original: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetListings(
    original: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      })[]
    ]
  >;

  assetRentalStatus(
    warpedAssetId: { class: BytesLike; data: BytesLike },
    overrides?: CallOverrides
  ): Promise<number>;

  assetWarperCount(
    original: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetWarpers(
    original: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      ([string, string, string, BigNumber, boolean] & {
        original: string;
        controller: string;
        name: string;
        universeId: BigNumber;
        paused: boolean;
      })[]
    ]
  >;

  balance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(
    account: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  collectionRentedValue(
    warpedCollectionId: BytesLike,
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delistAsset(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deregisterWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateRent(
    rentingParams: {
      listingId: BigNumberish;
      warper: string;
      renter: string;
      rentalPeriod: BigNumberish;
      paymentToken: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      protocolFee: BigNumber;
      listerBaseFee: BigNumber;
      listerPremium: BigNumber;
      universeBaseFee: BigNumber;
      universePremium: BigNumber;
    }
  >;

  initialize(
    params: {
      warperPresetFactory: string;
      assetClassRegistry: string;
      listingStrategyRegistry: string;
      universeRegistry: string;
      acl: string;
      baseToken: string;
      rentalFeePercent: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWarperAdmin(
    warper: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listAsset(
    asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
    params: { strategy: BytesLike; data: BytesLike },
    maxLockPeriod: BigNumberish,
    immediatePayout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listingCount(overrides?: CallOverrides): Promise<BigNumber>;

  listingInfo(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [[string, string] & { class: string; data: string }, BigNumber] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      },
      [string, string] & { strategy: string; data: string },
      string,
      number,
      number,
      boolean,
      boolean,
      boolean
    ] & {
      asset: [[string, string] & { class: string; data: string }, BigNumber] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      };
      params: [string, string] & { strategy: string; data: string };
      lister: string;
      maxLockPeriod: number;
      lockedTill: number;
      immediatePayout: boolean;
      delisted: boolean;
      paused: boolean;
    }
  >;

  listings(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      })[]
    ]
  >;

  pauseListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  protocolBalances(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  protocolRentalFeePercent(overrides?: CallOverrides): Promise<number>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerWarper(
    warper: string,
    params: { name: string; universeId: BigNumberish; paused: boolean },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rent(
    rentingParams: {
      listingId: BigNumberish;
      warper: string;
      renter: string;
      rentalPeriod: BigNumberish;
      paymentToken: string;
    },
    maxPaymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentalAgreementInfo(
    rentalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [[string, string] & { class: string; data: string }, BigNumber] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      },
      string,
      BigNumber,
      string,
      number,
      number
    ] & {
      warpedAsset: [
        [string, string] & { class: string; data: string },
        BigNumber
      ] & {
        id: [string, string] & { class: string; data: string };
        value: BigNumber;
      };
      collectionId: string;
      listingId: BigNumber;
      renter: string;
      startTime: number;
      endTime: number;
    }
  >;

  setProtocolRentalFeePercent(
    rentalFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  supportedAssets(
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  universeBalance(
    universeId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeBalances(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  universeWarperCount(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeWarpers(
    universeId: BigNumberish,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      ([string, string, string, BigNumber, boolean] & {
        original: string;
        controller: string;
        name: string;
        universeId: BigNumber;
        paused: boolean;
      })[]
    ]
  >;

  unpauseListing(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseWarper(
    warper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userListingCount(
    lister: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userListings(
    lister: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      })[]
    ]
  >;

  userRentalAgreements(
    renter: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        string,
        BigNumber,
        string,
        number,
        number
      ] & {
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        collectionId: string;
        listingId: BigNumber;
        renter: string;
        startTime: number;
        endTime: number;
      })[]
    ]
  >;

  userRentalCount(
    renter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  warperController(warper: string, overrides?: CallOverrides): Promise<string>;

  warperInfo(
    warper: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean] & {
      original: string;
      controller: string;
      name: string;
      universeId: BigNumber;
      paused: boolean;
    }
  >;

  warperPresetFactory(overrides?: CallOverrides): Promise<string>;

  withdrawAsset(
    listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUniverseFunds(
    universeId: BigNumberish,
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<number>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        protocolFee: BigNumber;
        listerBaseFee: BigNumber;
        listerPremium: BigNumber;
        universeBaseFee: BigNumber;
        universePremium: BigNumber;
      }
    >;

    initialize(
      params: {
        warperPresetFactory: string;
        assetClassRegistry: string;
        listingStrategyRegistry: string;
        universeRegistry: string;
        acl: string;
        baseToken: string;
        rentalFeePercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        string,
        number,
        number,
        boolean,
        boolean,
        boolean
      ] & {
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        lister: string;
        maxLockPeriod: number;
        lockedTill: number;
        immediatePayout: boolean;
        delisted: boolean;
        paused: boolean;
      }
    >;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    pauseListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<number>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: CallOverrides
    ): Promise<void>;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        string,
        BigNumber,
        string,
        number,
        number
      ] & {
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        collectionId: string;
        listingId: BigNumber;
        renter: string;
        startTime: number;
        endTime: number;
      }
    >;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([string, string, string, BigNumber, boolean] & {
          original: string;
          controller: string;
          name: string;
          universeId: BigNumber;
          paused: boolean;
        })[]
      ]
    >;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseWarper(warper: string, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          [string, string] & { strategy: string; data: string },
          string,
          number,
          number,
          boolean,
          boolean,
          boolean
        ] & {
          asset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          params: [string, string] & { strategy: string; data: string };
          lister: string;
          maxLockPeriod: number;
          lockedTill: number;
          immediatePayout: boolean;
          delisted: boolean;
          paused: boolean;
        })[]
      ]
    >;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([
          [[string, string] & { class: string; data: string }, BigNumber] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          },
          string,
          BigNumber,
          string,
          number,
          number
        ] & {
          warpedAsset: [
            [string, string] & { class: string; data: string },
            BigNumber
          ] & {
            id: [string, string] & { class: string; data: string };
            value: BigNumber;
          };
          collectionId: string;
          listingId: BigNumber;
          renter: string;
          startTime: number;
          endTime: number;
        })[]
      ]
    >;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<string>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean] & {
        original: string;
        controller: string;
        name: string;
        universeId: BigNumber;
        paused: boolean;
      }
    >;

    warperPresetFactory(overrides?: CallOverrides): Promise<string>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "AssetDelisted(uint256,address,uint32)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      unlocksAt?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { listingId: BigNumber; lister: string; unlocksAt: number }
    >;

    AssetDelisted(
      listingId?: BigNumberish | null,
      lister?: string | null,
      unlocksAt?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { listingId: BigNumber; lister: string; unlocksAt: number }
    >;

    "AssetListed(uint256,address,tuple,tuple,uint32)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null,
      params?: null,
      maxLockPeriod?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        number
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        maxLockPeriod: number;
      }
    >;

    AssetListed(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null,
      params?: null,
      maxLockPeriod?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        [string, string] & { strategy: string; data: string },
        number
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        params: [string, string] & { strategy: string; data: string };
        maxLockPeriod: number;
      }
    >;

    "AssetRented(uint256,address,uint256,tuple,uint32,uint32)"(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        number,
        number
      ],
      {
        rentalId: BigNumber;
        renter: string;
        listingId: BigNumber;
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        startTime: number;
        endTime: number;
      }
    >;

    AssetRented(
      rentalId?: BigNumberish | null,
      renter?: string | null,
      listingId?: BigNumberish | null,
      warpedAsset?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        },
        number,
        number
      ],
      {
        rentalId: BigNumber;
        renter: string;
        listingId: BigNumber;
        warpedAsset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
        startTime: number;
        endTime: number;
      }
    >;

    "AssetWithdrawn(uint256,address,tuple)"(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        }
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
      }
    >;

    AssetWithdrawn(
      listingId?: BigNumberish | null,
      lister?: string | null,
      asset?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [[string, string] & { class: string; data: string }, BigNumber] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        }
      ],
      {
        listingId: BigNumber;
        lister: string;
        asset: [
          [string, string] & { class: string; data: string },
          BigNumber
        ] & {
          id: [string, string] & { class: string; data: string };
          value: BigNumber;
        };
      }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "ListingPaused(uint256)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    ListingPaused(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    "ListingUnpaused(uint256)"(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    ListingUnpaused(
      listingId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    "ProtocolRentalFeeChanged(uint16)"(
      rentalFeePercent?: null
    ): TypedEventFilter<[number], { rentalFeePercent: number }>;

    ProtocolRentalFeeChanged(
      rentalFeePercent?: null
    ): TypedEventFilter<[number], { rentalFeePercent: number }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    "WarperDeregistered(address)"(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    WarperDeregistered(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    "WarperPaused(address)"(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    WarperPaused(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    "WarperRegistered(uint256,address,address)"(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { universeId: BigNumber; warper: string; original: string }
    >;

    WarperRegistered(
      universeId?: BigNumberish | null,
      warper?: string | null,
      original?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { universeId: BigNumber; warper: string; original: string }
    >;

    "WarperUnpaused(address)"(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;

    WarperUnpaused(
      warper?: string | null
    ): TypedEventFilter<[string], { warper: string }>;
  };

  estimateGas: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      params: {
        warperPresetFactory: string;
        assetClassRegistry: string;
        listingStrategyRegistry: string;
        universeRegistry: string;
        acl: string;
        baseToken: string;
        rentalFeePercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listingCount(overrides?: CallOverrides): Promise<BigNumber>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRentalFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    warperInfo(warper: string, overrides?: CallOverrides): Promise<BigNumber>;

    warperPresetFactory(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetListingCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetListings(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetRentalStatus(
      warpedAssetId: { class: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWarperCount(
      original: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetWarpers(
      original: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionRentedValue(
      warpedCollectionId: BytesLike,
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deregisterWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateRent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: {
        warperPresetFactory: string;
        assetClassRegistry: string;
        listingStrategyRegistry: string;
        universeRegistry: string;
        acl: string;
        baseToken: string;
        rentalFeePercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWarperAdmin(
      warper: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAsset(
      asset: { id: { class: BytesLike; data: BytesLike }; value: BigNumberish },
      params: { strategy: BytesLike; data: BytesLike },
      maxLockPeriod: BigNumberish,
      immediatePayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingInfo(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRentalFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerWarper(
      warper: string,
      params: { name: string; universeId: BigNumberish; paused: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rent(
      rentingParams: {
        listingId: BigNumberish;
        warper: string;
        renter: string;
        rentalPeriod: BigNumberish;
        paymentToken: string;
      },
      maxPaymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentalAgreementInfo(
      rentalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProtocolRentalFeePercent(
      rentalFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedAssets(
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarperCount(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeWarpers(
      universeId: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseListing(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseWarper(
      warper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userListingCount(
      lister: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userListings(
      lister: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalAgreements(
      renter: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRentalCount(
      renter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperController(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperInfo(
      warper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warperPresetFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAsset(
      listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
