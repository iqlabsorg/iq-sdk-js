/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPaymentManagerInterface extends ethers.utils.Interface {
  functions: {
    "balance(address,address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "protocolBalance(address)": FunctionFragment;
    "protocolBalances()": FunctionFragment;
    "universeBalance(uint256,address)": FunctionFragment;
    "universeBalances(uint256)": FunctionFragment;
    "withdrawFunds(address,uint256,address)": FunctionFragment;
    "withdrawProtocolFunds(address,uint256,address)": FunctionFragment;
    "withdrawUniverseFunds(uint256,address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "universeBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFunds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUniverseFunds",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUniverseFunds",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPaymentManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPaymentManagerInterface;

  functions: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]]
    >;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]]
    >;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]]
    >;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(
    account: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  protocolBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  protocolBalances(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  universeBalance(
    universeId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  universeBalances(
    universeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  withdrawFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFunds(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUniverseFunds(
    universeId: BigNumberish,
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolBalances(overrides?: CallOverrides): Promise<BigNumber>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    universeBalance(
      universeId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universeBalances(
      universeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFunds(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUniverseFunds(
      universeId: BigNumberish,
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
