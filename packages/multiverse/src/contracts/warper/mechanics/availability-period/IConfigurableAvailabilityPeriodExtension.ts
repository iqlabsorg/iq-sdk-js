/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IConfigurableAvailabilityPeriodExtensionInterface
  extends utils.Interface {
  functions: {
    "__availabilityPeriodEnd()": FunctionFragment;
    "__availabilityPeriodRange()": FunctionFragment;
    "__availabilityPeriodStart()": FunctionFragment;
    "__setAvailabilityPeriodEnd(uint32)": FunctionFragment;
    "__setAvailabilityPeriodStart(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__availabilityPeriodEnd"
      | "__availabilityPeriodRange"
      | "__availabilityPeriodStart"
      | "__setAvailabilityPeriodEnd"
      | "__setAvailabilityPeriodStart"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__availabilityPeriodEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__availabilityPeriodRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__availabilityPeriodStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__setAvailabilityPeriodEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setAvailabilityPeriodStart",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__availabilityPeriodEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__availabilityPeriodRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__availabilityPeriodStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setAvailabilityPeriodEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setAvailabilityPeriodStart",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IConfigurableAvailabilityPeriodExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConfigurableAvailabilityPeriodExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __availabilityPeriodEnd(overrides?: CallOverrides): Promise<[number]>;

    __availabilityPeriodRange(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        availabilityPeriodStart: number;
        availabilityPeriodEnd: number;
      }
    >;

    __availabilityPeriodStart(overrides?: CallOverrides): Promise<[number]>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __availabilityPeriodEnd(overrides?: CallOverrides): Promise<number>;

  __availabilityPeriodRange(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & {
      availabilityPeriodStart: number;
      availabilityPeriodEnd: number;
    }
  >;

  __availabilityPeriodStart(overrides?: CallOverrides): Promise<number>;

  __setAvailabilityPeriodEnd(
    availabilityPeriodEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setAvailabilityPeriodStart(
    availabilityPeriodStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __availabilityPeriodEnd(overrides?: CallOverrides): Promise<number>;

    __availabilityPeriodRange(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        availabilityPeriodStart: number;
        availabilityPeriodEnd: number;
      }
    >;

    __availabilityPeriodStart(overrides?: CallOverrides): Promise<number>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    __availabilityPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    __availabilityPeriodRange(overrides?: CallOverrides): Promise<BigNumber>;

    __availabilityPeriodStart(overrides?: CallOverrides): Promise<BigNumber>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __availabilityPeriodEnd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __availabilityPeriodRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __availabilityPeriodStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __setAvailabilityPeriodEnd(
      availabilityPeriodEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setAvailabilityPeriodStart(
      availabilityPeriodStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
